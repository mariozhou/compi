/* The following code was generated by JFlex 1.6.1 */

package Main;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/ZhouInput/Desktop/Compilador-main/src/Main/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\107\1\10\1\11\1\11\1\10\22\0\1\107\1\72\1\0"+
    "\1\7\2\0\1\76\1\12\1\100\1\101\1\75\1\73\1\5\1\74"+
    "\1\4\1\13\12\2\1\106\1\6\1\71\1\67\1\70\2\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\64\1\44\1\14\1\20\2\1\1\52"+
    "\1\56\1\40\1\54\1\27\1\1\1\37\1\46\1\42\1\61\1\1"+
    "\1\62\3\1\1\102\1\0\1\103\1\0\1\1\1\0\1\24\1\36"+
    "\1\45\1\51\1\17\1\55\1\53\1\47\1\22\1\1\1\60\1\25"+
    "\1\16\1\21\1\15\1\43\1\1\1\30\1\57\1\23\1\50\1\63"+
    "\1\41\1\65\1\66\1\26\1\104\1\77\1\105\7\0\1\11\32\0"+
    "\1\3\60\0\1\106\37\0\1\106\u158e\0\1\3\u097f\0\13\3\35\0"+
    "\1\11\1\11\5\0\1\3\57\0\1\3\u0fa0\0\1\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\4\1\10\1\11\23\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\1\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\15\1\0\1\27\1\30\1\27\1\4"+
    "\1\1\2\0\1\31\1\32\3\2\1\33\4\2\1\34"+
    "\30\2\1\35\12\2\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\2\31\3\2"+
    "\1\51\33\2\1\52\7\2\1\53\7\2\1\54\6\2"+
    "\1\55\3\2\1\47\1\56\2\2\1\57\3\2\1\60"+
    "\10\2\1\61\4\2\1\62\6\2\1\63\1\64\3\2"+
    "\1\65\1\66\1\67\1\70\1\71\6\2\1\72\1\2"+
    "\1\73\1\74\3\2\1\75\13\2\1\76\2\2\1\77"+
    "\1\100\1\101\1\102\1\2\1\103\1\2\1\104\2\2"+
    "\1\105\15\2\1\106\3\2\1\107\1\110\2\2\1\111"+
    "\1\2\1\112\1\2\1\113\1\114\3\2\1\115\1\116"+
    "\1\117\3\2\1\120\5\2\1\121\1\2\1\122\1\2"+
    "\1\123\6\2\1\124\2\2\1\125\1\126\3\2\1\127"+
    "\1\130\1\2\1\131\1\132\1\133\1\2\1\134\1\2"+
    "\1\135\1\136\2\2\1\137\1\140\1\2\1\141\5\2"+
    "\1\142\2\2\1\143\1\144\4\2\1\145\1\146\1\147"+
    "\1\2\1\150\6\2\1\151\1\152\1\153\1\154\1\155"+
    "\1\156\1\2\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u0168\0\u0168"+
    "\0\u01b0\0\u01f8\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8"+
    "\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8"+
    "\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828"+
    "\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u0168\0\u09d8\0\u0a20"+
    "\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0240\0\u0bd0\0\u0168"+
    "\0\u0168\0\u0c18\0\u0c60\0\u0ca8\0\220\0\u0cf0\0\u0d38\0\u0d80"+
    "\0\u0dc8\0\220\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78"+
    "\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8"+
    "\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\u1488\0\220\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0"+
    "\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u0168\0\u0168\0\u0168"+
    "\0\u0168\0\u0168\0\u0168\0\u0168\0\110\0\110\0\u17a0\0\u17e8"+
    "\0\110\0\u1830\0\u1878\0\u18c0\0\u1908\0\220\0\u1950\0\u1998"+
    "\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18"+
    "\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058"+
    "\0\u20a0\0\220\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250"+
    "\0\u2298\0\220\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448"+
    "\0\u2490\0\220\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640"+
    "\0\220\0\u2688\0\u26d0\0\u2718\0\u2760\0\220\0\u27a8\0\u27f0"+
    "\0\220\0\u2838\0\u2880\0\u28c8\0\220\0\u2910\0\u2958\0\u29a0"+
    "\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\220\0\u2b50\0\u2b98"+
    "\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8"+
    "\0\u2e20\0\220\0\220\0\u2e68\0\u2eb0\0\u2ef8\0\220\0\220"+
    "\0\220\0\220\0\220\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060"+
    "\0\u30a8\0\u30f0\0\u3138\0\220\0\220\0\u3180\0\u31c8\0\u3210"+
    "\0\220\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408"+
    "\0\u3450\0\u3498\0\u34e0\0\u3528\0\220\0\u3570\0\u35b8\0\220"+
    "\0\220\0\220\0\220\0\u3600\0\220\0\u3648\0\220\0\u3690"+
    "\0\u36d8\0\220\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888"+
    "\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\220"+
    "\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0\0\220\0\u3be8\0\u3c30\0\220"+
    "\0\u3c78\0\220\0\u3cc0\0\220\0\220\0\u3d08\0\u3d50\0\u3d98"+
    "\0\220\0\220\0\220\0\u3de0\0\u3e28\0\u3e70\0\220\0\u3eb8"+
    "\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\220\0\u4020\0\220\0\u4068"+
    "\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\220"+
    "\0\u42a8\0\u42f0\0\u4338\0\220\0\u4380\0\u43c8\0\u4410\0\220"+
    "\0\220\0\u4458\0\220\0\220\0\220\0\u44a0\0\220\0\u44e8"+
    "\0\220\0\220\0\u4530\0\u4578\0\220\0\220\0\u45c0\0\220"+
    "\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728\0\220\0\u4770\0\u47b8"+
    "\0\220\0\220\0\u4800\0\u4848\0\u4890\0\u48d8\0\220\0\220"+
    "\0\220\0\u4920\0\220\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88"+
    "\0\u4ad0\0\220\0\220\0\220\0\220\0\220\0\220\0\u4b18"+
    "\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\14\1\15\3\3\1\16\6\3"+
    "\1\17\1\3\1\20\1\21\1\22\1\23\1\24\1\3"+
    "\1\25\1\26\1\3\1\27\1\3\1\30\1\3\1\31"+
    "\3\3\1\32\1\3\1\33\1\3\1\34\2\3\1\35"+
    "\1\36\1\3\1\37\2\3\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\12\10\2\1\0\76\2"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\53\3\7\60\2\2\7\60\1\0\1\2\1\61"+
    "\1\4\1\2\1\62\2\60\1\2\1\0\1\2\2\60"+
    "\3\61\1\63\15\61\1\63\31\61\7\60\2\2\7\60"+
    "\1\0\3\2\1\5\4\2\1\12\1\5\75\2\1\12"+
    "\1\2\2\60\1\2\3\60\1\2\1\0\1\2\64\60"+
    "\2\2\7\60\1\0\10\11\1\0\1\2\75\11\1\64"+
    "\3\0\1\12\4\0\2\12\75\0\1\12\1\65\2\66"+
    "\1\65\2\66\1\60\1\65\1\67\1\65\1\70\63\66"+
    "\2\65\7\66\1\67\1\2\2\60\1\2\3\60\1\2"+
    "\1\0\1\2\1\60\1\71\62\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\1\3\1\72\51\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\2\3"+
    "\1\73\2\3\1\74\33\3\1\75\1\3\1\76\7\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\1\3\1\77\12\3\1\100"+
    "\36\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\11\3\1\101\17\3"+
    "\1\102\15\3\1\103\3\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\1\3\1\104\51\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\1\3"+
    "\1\105\6\3\1\106\1\107\41\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\1\3\1\110\1\3\1\111\2\3\1\112\44\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\5\3\1\113\3\3\1\114"+
    "\41\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\1\3\1\115\1\3"+
    "\1\116\47\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\3\3\1\117"+
    "\47\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\120\10\3"+
    "\1\121\16\3\1\122\17\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\3\3\1\123\47\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\2\3"+
    "\1\124\1\125\3\3\1\126\1\127\22\3\1\130\17\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\1\3\1\131\4\3\1\132"+
    "\44\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\5\3\1\133\21\3"+
    "\1\134\11\3\1\135\11\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\1\3\1\136\4\3\1\137\44\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\5\3\1\140\45\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\6\3\1\141\24\3\1\142\17\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\1\3\1\143\6\3\1\144\1\145\41\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\60\1\2\3\60\1\2"+
    "\1\0\1\2\55\60\1\146\1\147\5\60\2\2\7\60"+
    "\1\0\1\2\2\60\1\2\3\60\1\2\1\0\1\2"+
    "\55\60\1\150\6\60\2\2\7\60\1\0\1\2\2\60"+
    "\1\2\3\60\1\2\1\0\1\2\55\60\1\151\6\60"+
    "\2\2\7\60\1\0\1\2\2\60\1\2\3\60\1\2"+
    "\1\0\1\2\55\60\1\152\6\60\2\2\7\60\1\0"+
    "\1\2\2\60\1\2\3\60\1\2\1\0\1\2\61\60"+
    "\1\153\2\60\2\2\7\60\1\0\1\2\2\60\1\2"+
    "\3\60\1\2\1\0\1\2\62\60\1\154\1\60\2\2"+
    "\7\60\1\0\10\2\1\0\65\2\1\155\10\2\1\0"+
    "\10\2\1\0\66\2\1\156\7\2\1\0\1\2\2\61"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\53\61\7\60"+
    "\2\2\7\60\1\0\1\2\1\60\1\62\1\2\3\60"+
    "\1\2\1\0\1\2\5\60\1\157\15\60\1\157\40\60"+
    "\2\2\7\60\1\0\1\2\2\61\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\53\61\4\60\2\160\1\60\2\2"+
    "\7\60\1\0\10\64\2\0\76\64\6\65\1\2\1\65"+
    "\1\67\1\65\1\161\74\65\7\67\1\0\3\67\1\162"+
    "\75\67\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\2\3\1\163\50\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\27\3\1\164\23\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\6\3"+
    "\1\165\1\166\43\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\4\3"+
    "\1\167\12\3\1\170\12\3\1\171\3\3\1\172\1\3"+
    "\1\173\1\3\1\174\2\3\1\175\5\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\14\3\1\176\36\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\1\3\1\177\51\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\10\3\1\200\42\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\10\3"+
    "\1\201\42\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\1\3\1\202"+
    "\51\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\11\3\1\203\41\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\2\3\1\204\24\3\1\205"+
    "\23\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\1\3\1\206\51\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\1\3\1\207\51\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\7\3\1\210\1\3\1\211\27\3"+
    "\1\212\5\3\1\213\3\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\43\3\1\214\7\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\10\3"+
    "\1\215\42\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\43\3\1\216"+
    "\7\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\1\3\1\217\51\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\7\3\1\220\21\3\1\221"+
    "\21\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\25\3\1\222\25\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\2\3\1\223\46\3\1\224"+
    "\1\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\34\3\1\225\16\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\3\3\1\226\2\3\1\227"+
    "\44\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\7\3\1\230\43\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\10\3\1\231\42\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\7\3\1\232\43\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\1\3\1\233\6\3\1\234\42\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\47\3\1\235\3\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\34\3\1\236\16\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\31\3\1\237\21\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\37\3\1\240\13\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\3\3"+
    "\1\241\47\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\41\3\1\242"+
    "\11\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\47\3\1\243\3\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\31\3\1\244\21\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\11\3\1\245\41\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\5\3\1\246\45\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\3\3\1\247\2\3\1\250\44\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\14\3\1\251\36\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\11\3\1\252\17\3\1\253\21\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\1\3\1\254\51\3\7\60\2\2\7\60"+
    "\1\0\1\2\1\60\1\255\1\2\3\60\1\2\1\0"+
    "\1\2\61\60\2\255\1\60\2\2\7\60\1\0\1\2"+
    "\1\60\1\160\1\2\3\60\1\2\1\0\1\2\64\60"+
    "\2\2\7\60\111\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\3\3\1\256\47\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\1\3\1\257\51\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\7\3\1\260\43\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\5\3\1\261\45\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\11\3"+
    "\1\262\41\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\1\3\1\263"+
    "\51\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\1\3\1\264\51\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\5\3\1\265\21\3\1\266"+
    "\4\3\1\267\16\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\1\3"+
    "\1\270\51\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\5\3\1\271"+
    "\45\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\7\3\1\272\43\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\37\3\1\273\13\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\14\3\1\274\36\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\5\3\1\275\45\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\11\3\1\276\41\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\1\3\1\277\51\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\3\3"+
    "\1\300\47\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\7\3\1\301"+
    "\43\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\43\3\1\302\7\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\14\3\1\303\36\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\3\3\1\304\47\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\305\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\10\3\1\306\42\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\6\3\1\307\44\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\27\3"+
    "\1\310\23\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\22\3\1\311"+
    "\30\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\312\47\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\2\3\1\313\50\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\14\3\1\314\36\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\1\3\1\315\1\3\1\316\47\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\27\3\1\317\23\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\7\3\1\320\43\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\3\3\1\321\47\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\5\3\1\322\45\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\43\3"+
    "\1\323\7\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\26\3\1\324"+
    "\24\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\14\3\1\325\36\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\27\3\1\326\23\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\14\3\1\327\36\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\330\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\7\3\1\331\43\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\44\3\1\332\6\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\33\3"+
    "\1\333\17\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\5\3\1\334"+
    "\45\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\335\47\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\14\3\1\336\36\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\1\3\1\337\51\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\35\3\1\340\15\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\5\3\1\341\45\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\11\3\1\342\31\3\1\343\7\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\43\3\1\344\7\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\3\3\1\345\47\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\10\3"+
    "\1\346\42\3\7\60\2\2\7\60\1\0\1\2\1\60"+
    "\1\255\1\2\3\60\1\2\1\0\1\2\64\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\14\3\1\347\36\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\6\3\1\350\44\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\1\3\1\351\51\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\34\3"+
    "\1\352\16\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\31\3\1\353"+
    "\21\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\354\47\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\7\3\1\355\43\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\47\3\1\356\3\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\11\3\1\357\41\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\15\3\1\360\1\361\1\362\1\363\32\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\14\3\1\364\36\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\2\3\1\365\50\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\12\3\1\366\40\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\14\3\1\367\36\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\14\3"+
    "\1\370\36\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\34\3\1\371"+
    "\16\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\372\47\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\22\3\1\373\30\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\5\3\1\374\45\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\7\3\1\375\43\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\34\3\1\376\16\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\31\3\1\377\21\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\11\3"+
    "\1\u0100\41\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\11\3\1\u0101"+
    "\41\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\1\3\1\u0102\51\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\14\3\1\u0103\36\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\6\3\1\u0104\44\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\u0105\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\7\3\1\u0106\43\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\23\3\1\u0107\27\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\7\3"+
    "\1\u0108\43\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\50\3\1\u0109"+
    "\2\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\35\3\1\u010a\15\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\15\3\1\u010b\35\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\7\3\1\u010c\43\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\1\3\1\u010d\51\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\31\3\1\u010e\21\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\1\3\1\u010f\51\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\3\3"+
    "\1\u0110\47\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\7\3\1\u0111"+
    "\43\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\u0112\47\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\17\3\1\u0113\33\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\7\3\1\u0114\43\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\7\3\1\u0115\43\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\10\3\1\u0116\42\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\43\3\1\u0117\7\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\5\3"+
    "\1\u0118\45\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\44\3\1\u0119"+
    "\6\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\5\3\1\u011a\45\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\3\3\1\u011b\47\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\1\3\1\u011c\51\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\10\3\1\u011d\42\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\10\3\1\u011e\42\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\10\3\1\u011f\42\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\14\3"+
    "\1\u0120\36\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\3\3\1\u0121"+
    "\47\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\u0122\47\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\3\3\1\u0123\47\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\11\3\1\u0124\41\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\u0125\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\10\3\1\u0126\42\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\3\3\1\u0127\47\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\31\3"+
    "\1\u0128\21\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\35\3\1\u0129"+
    "\15\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\47\3\1\u012a\3\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\2\3\1\u012b\50\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\17\3\1\u012c\33\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\u012d\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\10\3\1\u012e\42\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\1\3\1\u012f\51\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\7\3"+
    "\1\u0130\43\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\23\3\1\u0131"+
    "\16\3\1\u0132\10\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\44\3"+
    "\1\u0133\6\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\25\3\1\u0134"+
    "\25\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\11\3\1\u0135\41\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\33\3\1\u0136\17\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\11\3\1\u0137\41\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\u0138\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\35\3\1\u0139\15\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\31\3\1\u013a\21\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\2\3"+
    "\1\u013b\50\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\14\3\1\u013c"+
    "\36\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\u013d\47\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\11\3\1\u013e\41\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\14\3\1\u013f\36\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\50\3\1\u0140\2\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\7\3\1\u0141\43\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\52\3\1\u0142\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\3\3\1\u0143"+
    "\47\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\26\3\1\u0144\24\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\3\3\1\u0145\47\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\27\3\1\u0146\23\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\10\3\1\u0147\42\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\31\3\1\u0148\21\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\31\3\1\u0149\21\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\25\3"+
    "\1\u014a\25\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\30\3\1\u014b"+
    "\22\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\1\3\1\u014c\51\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\15\3\1\u014d\35\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\3\3\1\u014e\47\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\u014f\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\6\3\1\u0150\44\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\44\3\1\u0151\6\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\11\3"+
    "\1\u0152\41\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\10\3\1\u0153"+
    "\42\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\35\3\1\u0154\15\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\6\3\1\u0155\44\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\2\3\1\u0156\50\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\u0157\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\5\3\1\u0158\45\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\16\3\1\u0159\34\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\35\3"+
    "\1\u015a\15\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\7\3\1\u015b"+
    "\43\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\31\3\1\u015c\21\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\12\3\1\u015d\40\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\31\3\1\u015e\21\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\u015f\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\2\3\1\u0160\50\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\3\3\1\u0161\47\3\7\60\2\2\7\60\1\0\1\2"+
    "\2\3\1\2\3\60\1\2\1\0\1\2\2\60\3\3"+
    "\1\u0162\47\3\7\60\2\2\7\60\1\0\1\2\2\3"+
    "\1\2\3\60\1\2\1\0\1\2\2\60\44\3\1\u0163"+
    "\6\3\7\60\2\2\7\60\1\0\1\2\2\3\1\2"+
    "\3\60\1\2\1\0\1\2\2\60\3\3\1\u0164\47\3"+
    "\7\60\2\2\7\60\1\0\1\2\2\3\1\2\3\60"+
    "\1\2\1\0\1\2\2\60\3\3\1\u0165\47\3\7\60"+
    "\2\2\7\60\1\0\1\2\2\3\1\2\3\60\1\2"+
    "\1\0\1\2\2\60\14\3\1\u0166\36\3\7\60\2\2"+
    "\7\60\1\0\1\2\2\3\1\2\3\60\1\2\1\0"+
    "\1\2\2\60\3\3\1\u0167\47\3\7\60\2\2\7\60"+
    "\1\0\1\2\2\3\1\2\3\60\1\2\1\0\1\2"+
    "\2\60\14\3\1\u0168\36\3\7\60\2\2\7\60\1\0"+
    "\1\2\2\3\1\2\3\60\1\2\1\0\1\2\2\60"+
    "\10\3\1\u0169\42\3\7\60\2\2\7\60\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\56\1\1\0\5\1\2\0\72\1\1\11\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public Symbol token(int simbolo){
		// Lexema lexema = new Lexema( yytext() );
		return new Symbol(simbolo,yyline,yycolumn,yytext());
	}
	public Symbol token(int simbolo,String componenteLexico){
		// Cup.vars++;
		// Lexema lexema = new Lexema( yytext() );
		return new Symbol(simbolo,yyline,yycolumn,yytext());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
          case 112: break;
          case 2: 
            { return new Symbol(sym.Identificador, yychar, yyline, yytext());
            }
          case 113: break;
          case 3: 
            { return new Symbol(sym.Numero_Entero, yychar, yyline, yytext());
            }
          case 114: break;
          case 4: 
            { /*Ignore*/
            }
          case 115: break;
          case 5: 
            { return new Symbol(sym.Punto, yychar, yyline, yytext());
            }
          case 116: break;
          case 6: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            }
          case 117: break;
          case 7: 
            { return new Symbol(sym.PComa, yychar, yyline, yytext());
            }
          case 118: break;
          case 8: 
            { return new Symbol(sym.Comillas_simples, yychar, yyline, yytext());
            }
          case 119: break;
          case 9: 
            { return new Symbol(sym.Division, yychar, yyline, yytext());
            }
          case 120: break;
          case 10: 
            { return new Symbol(sym.Asignacion, yychar, yyline, yytext());
            }
          case 121: break;
          case 11: 
            { return new Symbol(sym.Mayor, yychar, yyline, yytext());
            }
          case 122: break;
          case 12: 
            { return new Symbol(sym.Menor, yychar, yyline, yytext());
            }
          case 123: break;
          case 13: 
            { return new Symbol(sym.ERROR2, yychar, yyline, yytext());
            }
          case 124: break;
          case 14: 
            { return new Symbol(sym.Suma, yychar, yyline, yytext());
            }
          case 125: break;
          case 15: 
            { return new Symbol(sym.Resta, yychar, yyline, yytext());
            }
          case 126: break;
          case 16: 
            { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
            }
          case 127: break;
          case 17: 
            { return new Symbol(sym.Parentesis_izq, yychar, yyline, yytext());
            }
          case 128: break;
          case 18: 
            { return new Symbol(sym.Parentesis_der, yychar, yyline, yytext());
            }
          case 129: break;
          case 19: 
            { return new Symbol(sym.Corchete_izq, yychar, yyline, yytext());
            }
          case 130: break;
          case 20: 
            { return new Symbol(sym.Corchete_der, yychar, yyline, yytext());
            }
          case 131: break;
          case 21: 
            { return new Symbol(sym.Llave_izq, yychar, yyline, yytext());
            }
          case 132: break;
          case 22: 
            { return new Symbol(sym.Llave_der, yychar, yyline, yytext());
            }
          case 133: break;
          case 23: 
            { return new Symbol(sym.ERROR3, yychar, yyline, yytext());
            }
          case 134: break;
          case 24: 
            { return new Symbol(sym.Numero_Flotante, yychar, yyline, yytext());
            }
          case 135: break;
          case 25: 
            { return new Symbol(sym.Cadena, yychar, yyline, yytext());
            }
          case 136: break;
          case 26: 
            { return new Symbol(sym.Libreria, yychar, yyline, yytext());
            }
          case 137: break;
          case 27: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            }
          case 138: break;
          case 28: 
            { return new Symbol(sym.Ac, yychar, yyline, yytext());
            }
          case 139: break;
          case 29: 
            { return new Symbol(sym.On, yychar, yyline, yytext());
            }
          case 140: break;
          case 30: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            }
          case 141: break;
          case 31: 
            { return new Symbol(sym.AsignacionArrow, yychar, yyline, yytext());
            }
          case 142: break;
          case 32: 
            { return new Symbol(sym.Menor_igual, yychar, yyline, yytext());
            }
          case 143: break;
          case 33: 
            { return new Symbol(sym.Mayor_igual, yychar, yyline, yytext());
            }
          case 144: break;
          case 34: 
            { return new Symbol(sym.Diferente, yychar, yyline, yytext());
            }
          case 145: break;
          case 35: 
            { return new Symbol(sym.Inc, yychar, yyline, yytext());
            }
          case 146: break;
          case 36: 
            { return new Symbol(sym.Dec, yychar, yyline, yytext());
            }
          case 147: break;
          case 37: 
            { return new Symbol(sym.And, yychar, yyline, yytext());
            }
          case 148: break;
          case 38: 
            { return new Symbol(sym.Or, yychar, yyline, yytext());
            }
          case 149: break;
          case 39: 
            { return new Symbol(sym.Numero_Euler_Flotante, yychar, yyline, yytext());
            }
          case 150: break;
          case 40: 
            { return new Symbol(sym.Numero_Euler, yychar, yyline, yytext());
            }
          case 151: break;
          case 41: 
            { return new Symbol(sym.Int, yychar, yyline, yytext());
            }
          case 152: break;
          case 42: 
            { return new Symbol(sym.New, yychar, yyline, yytext());
            }
          case 153: break;
          case 43: 
            { return new Symbol(sym.Set, yychar, yyline, yytext());
            }
          case 154: break;
          case 44: 
            { return new Symbol(sym.Off, yychar, yyline, yytext());
            }
          case 155: break;
          case 45: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            }
          case 156: break;
          case 46: 
            { return new Symbol(sym.Home, yychar, yyline, yytext());
            }
          case 157: break;
          case 47: 
            { return new Symbol(sym.IsIn, yychar, yyline, yytext());
            }
          case 158: break;
          case 48: 
            { return new Symbol(sym.IsOn, yychar, yyline, yytext());
            }
          case 159: break;
          case 49: 
            { return new Symbol(sym.Bool, yychar, yyline, yytext());
            }
          case 160: break;
          case 50: 
            { return new Symbol(sym.Door, yychar, yyline, yytext());
            }
          case 161: break;
          case 51: 
            { return new Symbol(sym.Else, yychar, yyline, yytext());
            }
          case 162: break;
          case 52: 
            { return new Symbol(sym.Room, yychar, yyline, yytext());
            }
          case 163: break;
          case 53: 
            { return new Symbol(sym.Temp, yychar, yyline, yytext());
            }
          case 164: break;
          case 54: 
            { return new Symbol(sym.Text, yychar, yyline, yytext());
            }
          case 165: break;
          case 55: 
            { return new Symbol(sym.True, yychar, yyline, yytext());
            }
          case 166: break;
          case 56: 
            { return new Symbol(sym.Then, yychar, yyline, yytext());
            }
          case 167: break;
          case 57: 
            { return new Symbol(sym.This, yychar, yyline, yytext());
            }
          case 168: break;
          case 58: 
            { return new Symbol(sym.Lock, yychar, yyline, yytext());
            }
          case 169: break;
          case 59: 
            { return new Symbol(sym.Open, yychar, yyline, yytext());
            }
          case 170: break;
          case 60: 
            { return new Symbol(sym.Move, yychar, yyline, yytext());
            }
          case 171: break;
          case 61: 
            { return new Symbol(sym.When, yychar, yyline, yytext());
            }
          case 172: break;
          case 62: 
            { return new Symbol(sym.IsOut, yychar, yyline, yytext());
            }
          case 173: break;
          case 63: 
            { return new Symbol(sym.PortA, yychar, yyline, yytext());
            }
          case 174: break;
          case 64: 
            { return new Symbol(sym.PortB, yychar, yyline, yytext());
            }
          case 175: break;
          case 65: 
            { return new Symbol(sym.PortC, yychar, yyline, yytext());
            }
          case 176: break;
          case 66: 
            { return new Symbol(sym.PortD, yychar, yyline, yytext());
            }
          case 177: break;
          case 67: 
            { return new Symbol(sym.Alarm, yychar, yyline, yytext());
            }
          case 178: break;
          case 68: 
            { return new Symbol(sym.Color, yychar, yyline, yytext());
            }
          case 179: break;
          case 69: 
            { return new Symbol(sym.Close, yychar, yyline, yytext());
            }
          case 180: break;
          case 70: 
            { return new Symbol(sym.Start, yychar, yyline, yytext());
            }
          case 181: break;
          case 71: 
            { return new Symbol(sym.Light, yychar, yyline, yytext());
            }
          case 182: break;
          case 72: 
            { return new Symbol(sym.Micro, yychar, yyline, yytext());
            }
          case 183: break;
          case 73: 
            { return new Symbol(sym.While, yychar, yyline, yytext());
            }
          case 184: break;
          case 74: 
            { return new Symbol(sym.False, yychar, yyline, yytext());
            }
          case 185: break;
          case 75: 
            { return new Symbol(sym.Float, yychar, yyline, yytext());
            }
          case 186: break;
          case 76: 
            { return new Symbol(sym.Import, yychar, yyline, yytext());
            }
          case 187: break;
          case 77: 
            { return new Symbol(sym.IsLock, yychar, yyline, yytext());
            }
          case 188: break;
          case 78: 
            { return new Symbol(sym.IsOpen, yychar, yyline, yytext());
            }
          case 189: break;
          case 79: 
            { return new Symbol(sym.IsMove, yychar, yyline, yytext());
            }
          case 190: break;
          case 80: 
            { return new Symbol(sym.Camera, yychar, yyline, yytext());
            }
          case 191: break;
          case 81: 
            { return new Symbol(sym.Device, yychar, yyline, yytext());
            }
          case 192: break;
          case 82: 
            { return new Symbol(sym.Enable, yychar, yyline, yytext());
            }
          case 193: break;
          case 83: 
            { return new Symbol(sym.Record, yychar, yyline, yytext());
            }
          case 194: break;
          case 84: 
            { return new Symbol(sym.LockAt, yychar, yyline, yytext());
            }
          case 195: break;
          case 85: 
            { return new Symbol(sym.Unlock, yychar, yyline, yytext());
            }
          case 196: break;
          case 86: 
            { return new Symbol(sym.Window, yychar, yyline, yytext());
            }
          case 197: break;
          case 87: 
            { return new Symbol(sym.IsClose, yychar, yyline, yytext());
            }
          case 198: break;
          case 88: 
            { return new Symbol(sym.IsSound, yychar, yyline, yytext());
            }
          case 199: break;
          case 89: 
            { return new Symbol(sym.Program, yychar, yyline, yytext());
            }
          case 200: break;
          case 90: 
            { return new Symbol(sym.Avanzar, yychar, yyline, yytext());
            }
          case 201: break;
          case 91: 
            { return new Symbol(sym.Capture, yychar, yyline, yytext());
            }
          case 202: break;
          case 92: 
            { return new Symbol(sym.Detener, yychar, yyline, yytext());
            }
          case 203: break;
          case 93: 
            { return new Symbol(sym.Default, yychar, yyline, yytext());
            }
          case 204: break;
          case 94: 
            { return new Symbol(sym.Display, yychar, yyline, yytext());
            }
          case 205: break;
          case 95: 
            { return new Symbol(sym.Receive, yychar, yyline, yytext());
            }
          case 206: break;
          case 96: 
            { return new Symbol(sym.GetTemp, yychar, yyline, yytext());
            }
          case 207: break;
          case 97: 
            { return new Symbol(sym.StopRec, yychar, yyline, yytext());
            }
          case 208: break;
          case 98: 
            { return new Symbol(sym.Whistle, yychar, yyline, yytext());
            }
          case 209: break;
          case 99: 
            { return new Symbol(sym.IsUnlock, yychar, yyline, yytext());
            }
          case 210: break;
          case 100: 
            { return new Symbol(sym.Doorbell, yychar, yyline, yytext());
            }
          case 211: break;
          case 101: 
            { return new Symbol(sym.SaveFace, yychar, yyline, yytext());
            }
          case 212: break;
          case 102: 
            { return new Symbol(sym.Shutdown, yychar, yyline, yytext());
            }
          case 213: break;
          case 103: 
            { return new Symbol(sym.LightRGB, yychar, yyline, yytext());
            }
          case 214: break;
          case 104: 
            { return new Symbol(sym.UnlockAt, yychar, yyline, yytext());
            }
          case 215: break;
          case 105: 
            { return new Symbol(sym.LightMode, yychar, yyline, yytext());
            }
          case 216: break;
          case 106: 
            { return new Symbol(sym.FaceCheck, yychar, yyline, yytext());
            }
          case 217: break;
          case 107: 
            { return new Symbol(sym.Initialize, yychar, yyline, yytext());
            }
          case 218: break;
          case 108: 
            { return new Symbol(sym.DeleteFace, yychar, yyline, yytext());
            }
          case 219: break;
          case 109: 
            { return new Symbol(sym.Retroceder, yychar, yyline, yytext());
            }
          case 220: break;
          case 110: 
            { return new Symbol(sym.RecordTime, yychar, yyline, yytext());
            }
          case 221: break;
          case 111: 
            { return new Symbol(sym.SmartCamera, yychar, yyline, yytext());
            }
          case 222: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
