/* The following code was generated by JFlex 1.4.3 on 29/11/21 07:27 PM */

package Main;
import static Main.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/11/21 07:27 PM from the specification file
 * <tt>src/Main/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\71\1\106\1\4"+
    "\2\0\1\76\1\12\1\100\1\101\1\74\1\72\1\7\1\73\1\6"+
    "\1\75\12\2\1\11\1\10\1\70\1\66\1\67\2\0\1\37\1\57"+
    "\1\30\1\35\1\50\1\52\1\63\1\60\1\13\2\1\1\64\1\34"+
    "\1\61\1\32\1\54\1\1\1\21\1\42\1\25\1\65\1\1\1\44"+
    "\3\1\1\102\1\0\1\103\1\0\1\1\1\0\1\31\1\51\1\23"+
    "\1\24\1\22\1\33\1\55\1\45\1\26\1\1\1\53\1\46\1\14"+
    "\1\36\1\16\1\15\1\1\1\17\1\27\1\20\1\43\1\40\1\62"+
    "\1\56\1\47\1\41\1\104\1\77\1\105\123\0\1\1\37\0\1\1"+
    "\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\23\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\0\1\30\1\31\1\32\1\33\2\0"+
    "\1\1\2\0\1\34\2\2\1\35\46\2\1\36\1\37"+
    "\1\40\1\41\1\3\1\42\1\43\1\44\1\45\1\30"+
    "\1\46\1\32\1\47\1\33\1\0\1\33\2\34\52\2"+
    "\1\0\1\33\2\47\13\2\1\35\17\2\1\35\1\2"+
    "\1\46\1\33\24\2\1\35\4\2\1\35\1\2\1\35"+
    "\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u01f1\0\107\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3"+
    "\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u01f1\0\u0852\0\u0899\0\u08e0\0\u01f1\0\u01f1\0\u0927\0\u096e"+
    "\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u01aa\0\u0b18\0\u0238\0\u0b5f"+
    "\0\u01f1\0\u0ba6\0\u0bed\0\216\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09"+
    "\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9"+
    "\0\u1630\0\u1677\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u16be\0\u01f1"+
    "\0\u01f1\0\107\0\107\0\u09fc\0\u0a43\0\u1705\0\u174c\0\u1793"+
    "\0\u17da\0\u1821\0\107\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984"+
    "\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c"+
    "\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264"+
    "\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c"+
    "\0\u24e3\0\u17da\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d"+
    "\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd"+
    "\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2455"+
    "\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26"+
    "\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e"+
    "\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396"+
    "\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\5\3\1\15\3\3\1\16"+
    "\2\3\1\17\1\3\1\20\1\3\1\21\1\22\1\3"+
    "\1\23\2\3\1\24\1\3\1\25\3\3\1\26\1\3"+
    "\1\27\1\3\1\30\2\3\1\31\1\32\1\33\1\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\4\2\1\0\1\2\1\0\102\2"+
    "\2\3\1\0\1\2\1\0\3\57\1\2\1\57\53\3"+
    "\10\57\2\2\6\57\1\2\1\60\1\61\1\4\1\0"+
    "\1\60\1\0\1\62\2\57\1\60\1\57\7\61\1\63"+
    "\25\61\1\63\15\61\10\57\2\60\6\57\1\2\3\0"+
    "\1\5\1\0\1\5\101\0\5\6\1\0\101\6\1\2"+
    "\1\57\1\64\1\0\1\2\1\0\1\65\2\57\1\2"+
    "\64\57\2\2\6\57\2\2\2\57\1\0\1\2\1\0"+
    "\3\57\1\2\64\57\2\2\6\57\1\2\1\66\2\67"+
    "\1\70\1\66\1\70\2\67\1\57\1\66\1\71\63\67"+
    "\2\66\6\67\1\66\1\2\2\3\1\0\1\2\1\0"+
    "\3\57\1\2\1\57\1\3\1\72\12\3\1\73\3\3"+
    "\1\74\2\3\1\75\27\3\10\57\2\2\6\57\2\2"+
    "\2\3\1\0\1\2\1\0\3\57\1\2\1\57\3\3"+
    "\1\76\3\3\1\77\43\3\10\57\2\2\6\57\2\2"+
    "\2\3\1\0\1\2\1\0\3\57\1\2\1\57\4\3"+
    "\1\100\2\3\1\101\22\3\1\102\20\3\10\57\2\2"+
    "\6\57\2\2\2\3\1\0\1\2\1\0\3\57\1\2"+
    "\1\57\3\3\1\103\12\3\1\104\14\3\1\105\17\3"+
    "\10\57\2\2\6\57\2\2\2\3\1\0\1\2\1\0"+
    "\3\57\1\2\1\57\2\3\1\106\15\3\1\107\2\3"+
    "\1\74\27\3\10\57\2\2\6\57\2\2\2\3\1\0"+
    "\1\2\1\0\3\57\1\2\1\57\3\3\1\110\7\3"+
    "\1\111\37\3\10\57\2\2\6\57\2\2\2\3\1\0"+
    "\1\2\1\0\3\57\1\2\1\57\3\3\1\112\3\3"+
    "\1\113\3\3\1\114\37\3\10\57\2\2\6\57\2\2"+
    "\2\3\1\0\1\2\1\0\3\57\1\2\1\57\10\3"+
    "\1\74\14\3\1\115\5\3\1\116\17\3\10\57\2\2"+
    "\6\57\2\2\2\3\1\0\1\2\1\0\3\57\1\2"+
    "\1\57\1\3\1\117\3\3\1\120\1\3\1\121\22\3"+
    "\1\122\20\3\10\57\2\2\6\57\2\2\2\3\1\0"+
    "\1\2\1\0\3\57\1\2\1\57\13\3\1\123\16\3"+
    "\1\124\20\3\10\57\2\2\6\57\2\2\2\3\1\0"+
    "\1\2\1\0\3\57\1\2\1\57\23\3\1\125\7\3"+
    "\1\126\17\3\10\57\2\2\6\57\2\2\2\3\1\0"+
    "\1\2\1\0\3\57\1\2\1\57\3\3\1\127\12\3"+
    "\1\130\14\3\1\131\17\3\10\57\2\2\6\57\2\2"+
    "\2\3\1\0\1\2\1\0\3\57\1\2\1\57\3\3"+
    "\1\132\1\133\46\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\3\3\1\134"+
    "\47\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\3\3\1\135\47\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\7\3\1\136\43\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\7\3\1\137\43\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\3\3\1\140"+
    "\7\3\1\141\37\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\23\3\1\142"+
    "\27\3\10\57\2\2\6\57\2\2\2\57\1\0\1\2"+
    "\1\0\3\57\1\2\54\57\1\143\1\144\6\57\2\2"+
    "\6\57\2\2\2\57\1\0\1\2\1\0\3\57\1\2"+
    "\54\57\1\145\7\57\2\2\6\57\2\2\2\57\1\0"+
    "\1\2\1\0\3\57\1\2\54\57\1\146\7\57\2\2"+
    "\6\57\2\2\1\57\1\147\1\0\1\2\1\0\3\57"+
    "\1\2\60\57\1\150\3\57\2\2\6\57\2\2\1\57"+
    "\1\147\1\0\1\2\1\0\3\57\1\2\61\57\1\151"+
    "\2\57\2\2\6\57\4\2\1\0\1\2\1\0\70\2"+
    "\1\152\13\2\1\0\1\2\1\0\71\2\1\153\7\2"+
    "\3\60\1\0\1\60\1\0\3\2\1\60\1\2\53\60"+
    "\10\2\2\60\7\2\1\60\1\61\1\154\1\0\1\60"+
    "\1\0\3\57\1\60\1\57\53\61\10\57\2\60\6\57"+
    "\2\2\1\57\1\155\1\0\1\2\1\0\1\156\2\57"+
    "\1\2\10\57\1\157\25\57\1\157\25\57\2\2\6\57"+
    "\1\2\1\60\1\61\1\160\1\0\1\60\1\0\1\161"+
    "\2\57\1\60\1\57\53\61\4\57\2\162\2\57\2\60"+
    "\6\57\2\2\1\57\1\64\1\0\1\2\1\0\1\156"+
    "\2\57\1\2\64\57\2\2\6\57\1\2\3\66\1\70"+
    "\1\66\1\70\2\66\1\2\1\66\1\163\74\66\10\70"+
    "\1\0\1\70\1\164\74\70\1\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\2\3\1\165\50\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\1\166\14\3\1\167\1\3\1\170\1\3"+
    "\1\171\5\3\1\172\21\3\1\173\1\174\10\57\2\2"+
    "\6\57\2\2\2\3\1\0\1\2\1\0\3\57\1\2"+
    "\1\57\5\3\1\74\5\3\1\175\37\3\10\57\2\2"+
    "\6\57\2\2\2\3\1\0\1\2\1\0\3\57\1\2"+
    "\1\57\3\3\1\176\47\3\10\57\2\2\6\57\2\2"+
    "\2\3\1\0\1\2\1\0\3\57\1\2\1\57\5\3"+
    "\1\177\2\3\1\200\42\3\10\57\2\2\6\57\2\2"+
    "\2\3\1\0\1\2\1\0\3\57\1\2\1\57\30\3"+
    "\1\201\22\3\10\57\2\2\6\57\2\2\2\3\1\0"+
    "\1\2\1\0\3\57\1\2\1\57\1\3\1\202\41\3"+
    "\1\121\7\3\10\57\2\2\6\57\2\2\2\3\1\0"+
    "\1\2\1\0\3\57\1\2\1\57\13\3\1\203\37\3"+
    "\10\57\2\2\6\57\2\2\2\3\1\0\1\2\1\0"+
    "\3\57\1\2\1\57\33\3\1\204\17\3\10\57\2\2"+
    "\6\57\2\2\2\3\1\0\1\2\1\0\3\57\1\2"+
    "\1\57\1\3\1\205\1\206\50\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\3\3\1\126\47\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\7\3\1\166"+
    "\43\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\20\3\1\74\32\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\25\3\1\201\25\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\10\3\1\207\42\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\3\3\1\210"+
    "\47\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\5\3\1\211\12\3\1\212"+
    "\4\3\1\213\25\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\14\3\1\214"+
    "\36\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\16\3\1\215\34\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\16\3\1\216\34\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\16\3\1\217\34\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\3\3\1\220"+
    "\12\3\1\221\34\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\5\3\1\74"+
    "\45\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\30\3\1\222\22\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\23\3\1\223\27\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\7\3\1\166\3\3\1\224\37\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\16\3\1\225\34\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\14\3\1\201"+
    "\36\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\4\3\1\74\46\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\10\3\1\226\22\3\1\126\17\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\3\3\1\227\47\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\4\3\1\230\46\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\3\3\1\231"+
    "\47\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\3\3\1\232\47\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\1\3\1\201\51\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\47\3\1\74\3\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\5\3\1\233"+
    "\45\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\10\3\1\234\42\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\42\3\1\235\10\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\33\3\1\236\17\3\10\57\2\2\6\57\2\2\1\57"+
    "\1\147\1\0\1\2\1\0\1\237\2\57\1\2\10\57"+
    "\1\240\25\57\1\240\25\57\2\2\6\57\2\2\1\57"+
    "\1\156\1\0\1\2\1\0\1\156\2\57\1\2\64\57"+
    "\2\2\6\57\2\2\1\57\1\241\1\0\1\2\1\0"+
    "\3\57\1\2\60\57\2\241\2\57\2\2\6\57\1\2"+
    "\1\60\1\61\1\160\1\0\1\60\1\0\1\161\2\57"+
    "\1\60\1\57\53\61\10\57\2\60\6\57\2\2\1\57"+
    "\1\242\1\0\1\2\1\0\3\57\1\2\10\57\1\157"+
    "\25\57\1\157\25\57\2\2\6\57\2\2\1\57\1\162"+
    "\1\0\1\2\1\0\3\57\1\2\64\57\2\2\6\57"+
    "\1\2\107\0\1\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\3\3\1\221\47\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\23\3\1\74\27\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\16\3\1\243"+
    "\14\3\1\105\17\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\2\3\1\106"+
    "\15\3\1\107\2\3\1\74\4\3\1\121\22\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\3\3\1\110\47\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\3\3\1\244\47\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\3\3\1\245"+
    "\47\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\23\3\1\246\27\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\5\3\1\247\45\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\1\3\1\74\51\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\4\3\1\250"+
    "\46\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\3\3\1\251\3\3\1\252"+
    "\43\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\74\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\2\3\1\74\50\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\14\3\1\74\36\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\3\3\1\127"+
    "\47\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\253\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\5\3\1\254\45\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\4\3\1\255\46\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\4\3\1\256"+
    "\46\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\257\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\16\3\1\260\34\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\13\3\1\261\37\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\2\3\1\262"+
    "\50\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\23\3\1\263\27\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\4\3\1\176\46\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\4\3\1\264\46\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\2\3\1\265"+
    "\50\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\4\3\1\121\46\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\5\3\1\266\45\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\11\3\1\267\41\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\14\3\1\270"+
    "\16\3\1\201\17\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\36\3\1\271"+
    "\14\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\272\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\16\3\1\121\34\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\5\3\1\273\45\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\42\3\1\274"+
    "\10\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\33\3\1\74\17\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\12\3\1\275\40\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\40\3\1\276\12\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\32\3\1\277"+
    "\20\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\3\3\1\140\47\3\10\57"+
    "\2\2\6\57\2\2\1\57\1\300\1\0\1\2\1\0"+
    "\3\57\1\2\10\57\1\157\25\57\1\157\25\57\2\2"+
    "\6\57\2\2\1\57\1\301\1\0\1\2\1\0\1\161"+
    "\2\57\1\2\60\57\2\162\2\57\2\2\6\57\2\2"+
    "\1\57\1\241\1\0\1\2\1\0\3\57\1\2\64\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\1\3\1\302\51\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\30\3\1\303\22\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\10\3\1\304"+
    "\42\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\33\3\1\173\17\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\13\3\1\305\37\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\3\3\1\306\47\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\4\3\1\307"+
    "\46\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\13\3\1\110\37\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\4\3\1\310\46\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\30\3\1\311\22\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\3\3\1\74"+
    "\47\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\36\3\1\312\14\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\23\3\1\313\27\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\30\3\1\314\22\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\10\3\1\315"+
    "\42\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\33\3\1\316\17\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\26\3\1\317\24\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\5\3\1\320\45\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\6\3\1\321"+
    "\44\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\11\3\1\322\41\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\3\3\1\136\47\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\5\3\1\271\45\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\33\3\1\201"+
    "\17\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\15\3\1\323\35\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\15\3\1\74\4\3\1\74\1\3\1\74"+
    "\17\3\1\74\6\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\4\3\1\324"+
    "\46\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\325\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\24\3\1\121\26\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\5\3\1\326\45\3\10\57\2\2\6\57\2\2\1\57"+
    "\1\301\1\0\1\2\1\0\1\161\2\57\1\2\64\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\16\3\1\327\34\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\23\3\1\330\27\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\40\3\1\74"+
    "\12\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\16\3\1\331\34\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\10\3\1\332\42\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\11\3\1\333\41\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\16\3\1\74"+
    "\34\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\4\3\1\201\46\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\7\3\1\334\43\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\7\3\1\127\43\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\33\3\1\121"+
    "\17\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\335\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\16\3\1\336\34\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\16\3\1\127\34\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\15\3\1\337"+
    "\35\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\340\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\3\3\1\341\47\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\32\3\1\342\20\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\16\3\1\176"+
    "\34\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\1\3\1\202\51\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\6\3\1\343\12\3\1\344\31\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\4\3\1\345\46\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\11\3\1\74\41\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\33\3\1\346"+
    "\17\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\347\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\12\3\1\350\40\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\33\3\1\232\17\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\12\3\1\351"+
    "\40\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\34\3\1\74\16\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\16\3\1\352\34\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\10\3\1\74\42\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\47\3\1\166"+
    "\3\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\7\3\1\245\43\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\50\3\1\353\2\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\3\3\1\354\47\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\16\3\1\355"+
    "\34\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\13\3\1\356\37\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\11\3\1\313\41\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\13\3\1\135\37\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\34\3\1\357"+
    "\16\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\1\3\1\205\51\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\44\3\1\74\6\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\11\3\1\201\41\3\10\57\2\2\6\57\2\2\2\3"+
    "\1\0\1\2\1\0\3\57\1\2\1\57\17\3\1\360"+
    "\33\3\10\57\2\2\6\57\2\2\2\3\1\0\1\2"+
    "\1\0\3\57\1\2\1\57\26\3\1\201\24\3\10\57"+
    "\2\2\6\57\2\2\2\3\1\0\1\2\1\0\3\57"+
    "\1\2\1\57\2\3\1\201\50\3\10\57\2\2\6\57"+
    "\2\2\2\3\1\0\1\2\1\0\3\57\1\2\1\57"+
    "\20\3\1\107\32\3\10\57\2\2\6\57\1\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14981];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\55\1\1\0\4\1\2\0\1\1\2\0\70\1"+
    "\1\0\2\1\1\11\52\1\1\0\121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;
    public int columna;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Arrow"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return AsignacionArrow;
          }
        case 40: break;
        case 28: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Cadena"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Cadena;
          }
        case 41: break;
        case 34: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Incremental"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Inc;
          }
        case 42: break;
        case 18: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Agrupación"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Parentesis_izq;
          }
        case 43: break;
        case 13: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Error léxico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); Main.listaErrores.add("> Linea ( "+ (linea+1) +" ) - Error léxico - e005 - Cadena no válida -> " + lexeme + "\n"); Main.error = true; return E5;
          }
        case 44: break;
        case 19: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Agrupación"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Parentesis_der;
          }
        case 45: break;
        case 27: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Número euler"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Numero_Euler;
          }
        case 46: break;
        case 5: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Punto"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Punto;
          }
        case 47: break;
        case 6: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Separador"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Separador;
          }
        case 48: break;
        case 30: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Relacional"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Igual;
          }
        case 49: break;
        case 35: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Decremental"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Dec;
          }
        case 50: break;
        case 29: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Palabra reservada"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Palabra_reservada;
          }
        case 51: break;
        case 20: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Agrupación"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Corchete_izq;
          }
        case 52: break;
        case 26: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Error léxico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); Main.listaErrores.add("> Linea ( "+ (linea+1) +" ) - Error léxico - e002 - Número decimal no válido -> " + lexeme + "\n"); Main.error = true; return E6;
          }
        case 53: break;
        case 10: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Asignación"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Asignacion;
          }
        case 54: break;
        case 12: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Relacional"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Menor;
          }
        case 55: break;
        case 16: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Aritmetico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Multiplicacion;
          }
        case 56: break;
        case 21: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Agrupación"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Corchete_der;
          }
        case 57: break;
        case 25: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Error léxico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); Main.listaErrores.add("> Linea ( " + (linea+1) + " ) - Error léxico - e001 - Cadena no válida -> " + lexeme + "\n"); Main.error = true; return error;
          }
        case 58: break;
        case 17: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Aritmetico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Division;
          }
        case 59: break;
        case 2: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Identificador"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Identificador;
          }
        case 60: break;
        case 36: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Lógico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return And;
          }
        case 61: break;
        case 38: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Número flotante"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Numero_Flotante;
          }
        case 62: break;
        case 22: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Agrupación"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Llave_izq;
          }
        case 63: break;
        case 24: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Error léxico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); Main.listaErrores.add("> Linea ( "+ (linea+1) +" ) - Error léxico - e001 - Cadena no válida -> " + lexeme + "\n"); Main.error = true; return E1;
          }
        case 64: break;
        case 39: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Número euler flotante"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Numero_Euler_Flotante;
          }
        case 65: break;
        case 23: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Agrupación"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Llave_der;
          }
        case 66: break;
        case 15: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Aritmetico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Resta;
          }
        case 67: break;
        case 8: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Dos_puntos"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Dos_puntos;
          }
        case 68: break;
        case 14: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Aritmetico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Suma;
          }
        case 69: break;
        case 33: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Relacional"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Diferente;
          }
        case 70: break;
        case 9: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Comilla simple"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Comilla_simple;
          }
        case 71: break;
        case 7: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Delimitador"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Delimitador;
          }
        case 72: break;
        case 32: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Relacional"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Mayor_igual;
          }
        case 73: break;
        case 4: 
          { /*Ignore*/
          }
        case 74: break;
        case 1: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Error léxico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); Main.listaErrores.add("> Linea ( "+ (linea+1) +" ) - Error léxico - e001 - Cadena no válida -> " + lexeme + "\n"); Main.error = true; return E3;
          }
        case 75: break;
        case 37: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Lógico"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Or;
          }
        case 76: break;
        case 11: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Op. Relacional"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Mayor;
          }
        case 77: break;
        case 3: 
          { lexeme=yytext(); linea = yyline; columna = yycolumn; Main.listaCompLexico.add("Número entero"); Main.listaLexemas.add(lexeme); Main.listaLineaLexemas.add(linea+1); return Numero_Entero;
          }
        case 78: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
