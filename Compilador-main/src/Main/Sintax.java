
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 02 03:39:17 CST 2021
//----------------------------------------------------

package Main;

import java.util.Hashtable;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.awt.Color;
import java.io.BufferedWriter;
import java_cup.runtime.*;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.util.Stack;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.EOFException;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.IOException;
import java.util.Hashtable;
import java.io.InputStreamReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 02 03:39:17 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\357\000\002\002\004\000\002\050\002\000\002\002" +
    "\012\000\002\051\002\000\002\002\006\000\002\052\002" +
    "\000\002\002\005\000\002\053\002\000\002\002\005\000" +
    "\002\054\002\000\002\002\005\000\002\002\003\000\002" +
    "\055\002\000\002\003\005\000\002\056\002\000\002\003" +
    "\005\000\002\057\002\000\002\003\005\000\002\060\002" +
    "\000\002\003\005\000\002\061\002\000\002\003\005\000" +
    "\002\062\002\000\002\003\005\000\002\063\002\000\002" +
    "\003\005\000\002\003\003\000\002\064\002\000\002\035" +
    "\006\000\002\065\002\000\002\035\010\000\002\036\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\066\002\000\002\037\010\000\002" +
    "\037\007\000\002\037\007\000\002\037\007\000\002\037" +
    "\007\000\002\037\007\000\002\037\007\000\002\037\007" +
    "\000\002\037\007\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\006\005\000\002" +
    "\006\006\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\067\002\000\002\004\005\000\002\070\002\000\002" +
    "\004\006\000\002\071\002\000\002\004\006\000\002\027" +
    "\004\000\002\031\006\000\002\031\005\000\002\031\005" +
    "\000\002\031\003\000\002\032\004\000\002\032\003\000" +
    "\002\072\002\000\002\030\006\000\002\073\002\000\002" +
    "\030\006\000\002\074\002\000\002\030\006\000\002\030" +
    "\005\000\002\075\002\000\002\030\006\000\002\030\005" +
    "\000\002\076\002\000\002\030\006\000\002\077\002\000" +
    "\002\030\006\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\003\000\002\030\003\000" +
    "\002\100\002\000\002\034\005\000\002\101\002\000\002" +
    "\034\005\000\002\102\002\000\002\034\005\000\002\103" +
    "\002\000\002\034\005\000\002\104\002\000\002\034\005" +
    "\000\002\105\002\000\002\034\006\000\002\106\002\000" +
    "\002\034\006\000\002\107\002\000\002\034\006\000\002" +
    "\034\003\000\002\034\005\000\002\034\005\000\002\034" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\042\004\000\002\110\002\000" +
    "\002\047\017\000\002\044\004\000\002\044\003\000\002" +
    "\043\007\000\002\041\005\000\002\041\005\000\002\041" +
    "\003\000\002\111\002\000\002\024\010\000\002\112\002" +
    "\000\002\024\006\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\113" +
    "\002\000\002\017\010\000\002\114\002\000\002\017\006" +
    "\000\002\017\005\000\002\017\005\000\002\115\002\000" +
    "\002\017\007\000\002\116\002\000\002\017\007\000\002" +
    "\117\002\000\002\017\007\000\002\120\002\000\002\017" +
    "\007\000\002\121\002\000\002\017\010\000\002\122\002" +
    "\000\002\017\010\000\002\123\002\000\002\017\010\000" +
    "\002\124\002\000\002\017\010\000\002\017\004\000\002" +
    "\125\002\000\002\020\007\000\002\126\002\000\002\020" +
    "\007\000\002\127\002\000\002\020\007\000\002\130\002" +
    "\000\002\020\007\000\002\131\002\000\002\020\007\000" +
    "\002\132\002\000\002\020\007\000\002\133\002\000\002" +
    "\020\005\000\002\021\005\000\002\021\007\000\002\021" +
    "\005\000\002\021\007\000\002\021\003\000\002\022\005" +
    "\000\002\023\005\000\002\014\005\000\002\010\005\000" +
    "\002\010\003\000\002\005\006\000\002\005\006\000\002" +
    "\013\003\000\002\013\003\000\002\134\002\000\002\013" +
    "\005\000\002\135\002\000\002\016\005\000\002\136\002" +
    "\000\002\007\006\000\002\137\002\000\002\007\006\000" +
    "\002\140\002\000\002\007\006\000\002\141\002\000\002" +
    "\007\006\000\002\007\005\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\006\000\002" +
    "\007\006\000\002\007\005\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\142\002\000\002\011\006\000" +
    "\002\143\002\000\002\011\006\000\002\144\002\000\002" +
    "\012\007\000\002\145\002\000\002\012\005\000\002\012" +
    "\003\000\002\146\002\000\002\015\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0194\000\012\003\004\122\007\126\005\130\006\001" +
    "\002\000\014\002\ufff6\003\ufffc\122\ufffc\126\ufffc\130\ufffc" +
    "\001\002\000\012\003\ufffa\122\ufffa\126\ufffa\130\ufffa\001" +
    "\002\000\012\003\ufff8\122\ufff8\126\ufff8\130\ufff8\001\002" +
    "\000\006\003\012\005\000\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\074\003\ufffe\005\ufffe" +
    "\015\ufffe\047\ufffe\053\ufffe\055\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\121\ufffe\122\ufffe\126\ufffe\130\ufffe\147\ufffe\150\ufffe\152" +
    "\ufffe\153\ufffe\154\ufffe\155\ufffe\156\ufffe\157\ufffe\166\ufffe" +
    "\170\ufffe\001\002\000\004\005\014\001\002\000\004\011" +
    "\015\001\002\000\004\114\016\001\002\000\004\047\017" +
    "\001\002\000\004\120\020\001\002\000\074\003\050\005" +
    "\040\015\067\047\064\053\024\055\071\061\044\062\042" +
    "\063\046\064\065\065\072\066\045\067\047\070\043\071" +
    "\021\121\053\122\063\126\055\130\037\147\036\150\026" +
    "\152\060\153\035\154\022\155\066\156\054\157\041\166" +
    "\025\170\051\001\002\000\006\003\u0186\114\u0185\001\002" +
    "\000\004\114\u0181\001\002\000\074\003\ufff3\005\ufff3\015" +
    "\ufff3\047\ufff3\053\ufff3\055\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\121" +
    "\ufff3\122\ufff3\126\ufff3\130\ufff3\147\ufff3\150\ufff3\152\ufff3" +
    "\153\ufff3\154\ufff3\155\ufff3\156\ufff3\157\ufff3\166\ufff3\170" +
    "\ufff3\001\002\000\004\114\u0168\001\002\000\004\005\u0166" +
    "\001\002\000\004\114\u0161\001\002\000\076\002\uffc8\003" +
    "\uffc8\005\uffc8\015\uffc8\047\uffc8\053\uffc8\055\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\121\uffc8\122\uffc8\126\uffc8\130\uffc8\147\uffc8" +
    "\150\uffc8\152\uffc8\153\uffc8\154\uffc8\155\uffc8\156\uffc8\157" +
    "\uffc8\166\uffc8\170\uffc8\001\002\000\004\002\uffff\001\002" +
    "\000\074\003\uffe2\005\uffe2\015\uffe2\047\uffe2\053\uffe2\055" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\121\uffe2\122\uffe2\126\uffe2\130" +
    "\uffe2\147\uffe2\150\uffe2\152\uffe2\153\uffe2\154\uffe2\155\uffe2" +
    "\156\uffe2\157\uffe2\166\uffe2\170\uffe2\001\002\000\074\003" +
    "\uffe9\005\uffe9\015\uffe9\047\uffe9\053\uffe9\055\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070" +
    "\uffe9\071\uffe9\121\uffe9\122\uffe9\126\uffe9\130\uffe9\147\uffe9" +
    "\150\uffe9\152\uffe9\153\uffe9\154\uffe9\155\uffe9\156\uffe9\157" +
    "\uffe9\166\uffe9\170\uffe9\001\002\000\074\003\uffeb\005\uffeb" +
    "\015\uffeb\047\uffeb\053\uffeb\055\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\121\uffeb\122\uffeb\126\uffeb\130\uffeb\147\uffeb\150\uffeb\152" +
    "\uffeb\153\uffeb\154\uffeb\155\uffeb\156\uffeb\157\uffeb\166\uffeb" +
    "\170\uffeb\001\002\000\076\002\uffca\003\uffef\005\uffef\015" +
    "\uffef\047\uffef\053\uffef\055\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\121" +
    "\uffef\122\uffef\126\uffef\130\uffef\147\uffef\150\uffef\152\uffef" +
    "\153\uffef\154\uffef\155\uffef\156\uffef\157\uffef\166\uffef\170" +
    "\uffef\001\002\000\004\114\u0156\001\002\000\004\003\uffc0" +
    "\001\002\000\004\002\uffcb\001\002\000\004\003\u0152\001" +
    "\002\000\004\114\u014e\001\002\000\004\122\u0147\001\002" +
    "\000\004\114\u0143\001\002\000\004\122\u013b\001\002\000" +
    "\012\003\u0135\122\u0137\123\u0136\127\u0138\001\002\000\004" +
    "\122\u012d\001\002\000\004\114\300\001\002\000\100\002" +
    "\uffcd\003\ufff1\004\uffc4\005\ufff1\015\ufff1\047\ufff1\053\ufff1" +
    "\055\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\071\ufff1\121\ufff1\122\ufff1\126\ufff1" +
    "\130\ufff1\147\ufff1\150\ufff1\152\ufff1\153\ufff1\154\ufff1\155" +
    "\ufff1\156\ufff1\157\ufff1\166\ufff1\170\ufff1\001\002\000\004" +
    "\122\265\001\002\000\076\002\uffc5\003\uffc5\005\uffc5\015" +
    "\uffc5\047\uffc5\053\uffc5\055\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\121" +
    "\uffc5\122\uffc5\126\uffc5\130\uffc5\147\uffc5\150\uffc5\152\uffc5" +
    "\153\uffc5\154\uffc5\155\uffc5\156\uffc5\157\uffc5\166\uffc5\170" +
    "\uffc5\001\002\000\004\115\262\001\002\000\004\114\256" +
    "\001\002\000\006\002\uffcc\003\uffc2\001\002\000\076\002" +
    "\uffc7\003\uffc7\005\uffc7\015\uffc7\047\uffc7\053\uffc7\055\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\121\uffc7\122\uffc7\126\uffc7\130\uffc7" +
    "\147\uffc7\150\uffc7\152\uffc7\153\uffc7\154\uffc7\155\uffc7\156" +
    "\uffc7\157\uffc7\166\uffc7\170\uffc7\001\002\000\076\002\uffc9" +
    "\003\uffed\005\uffed\015\uffed\047\uffed\053\uffed\055\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed" +
    "\070\uffed\071\uffed\121\uffed\122\uffed\126\uffed\130\uffed\147" +
    "\uffed\150\uffed\152\uffed\153\uffed\154\uffed\155\uffed\156\uffed" +
    "\157\uffed\166\uffed\170\uffed\001\002\000\004\114\244\001" +
    "\002\000\074\003\ufff5\005\ufff5\015\ufff5\047\ufff5\053\ufff5" +
    "\055\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\071\ufff5\121\ufff5\122\ufff5\126\ufff5" +
    "\130\ufff5\147\ufff5\150\ufff5\152\ufff5\153\ufff5\154\ufff5\155" +
    "\ufff5\156\ufff5\157\ufff5\166\ufff5\170\ufff5\001\002\000\076" +
    "\002\uffc6\003\uffc6\005\uffc6\015\uffc6\047\uffc6\053\uffc6\055" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\121\uffc6\122\uffc6\126\uffc6\130" +
    "\uffc6\147\uffc6\150\uffc6\152\uffc6\153\uffc6\154\uffc6\155\uffc6" +
    "\156\uffc6\157\uffc6\166\uffc6\170\uffc6\001\002\000\004\075" +
    "\176\001\002\000\004\005\133\001\002\000\004\122\122" +
    "\001\002\000\004\114\116\001\002\000\004\003\114\001" +
    "\002\000\004\002\uffe7\001\002\000\004\114\107\001\002" +
    "\000\006\003\073\114\074\001\002\000\004\004\uff7a\001" +
    "\002\000\012\003\076\122\100\123\077\127\101\001\002" +
    "\000\004\115\102\001\002\000\004\115\uff71\001\002\000" +
    "\004\115\uff73\001\002\000\004\115\uff74\001\002\000\004" +
    "\115\uff72\001\002\000\004\004\uff7c\001\002\000\004\004" +
    "\104\001\002\000\076\002\uff7b\003\uff7b\005\uff7b\015\uff7b" +
    "\047\uff7b\053\uff7b\055\uff7b\061\uff7b\062\uff7b\063\uff7b\064" +
    "\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\121\uff7b" +
    "\122\uff7b\126\uff7b\130\uff7b\147\uff7b\150\uff7b\152\uff7b\153" +
    "\uff7b\154\uff7b\155\uff7b\156\uff7b\157\uff7b\166\uff7b\170\uff7b" +
    "\001\002\000\004\004\106\001\002\000\076\002\uff79\003" +
    "\uff79\005\uff79\015\uff79\047\uff79\053\uff79\055\uff79\061\uff79" +
    "\062\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070" +
    "\uff79\071\uff79\121\uff79\122\uff79\126\uff79\130\uff79\147\uff79" +
    "\150\uff79\152\uff79\153\uff79\154\uff79\155\uff79\156\uff79\157" +
    "\uff79\166\uff79\170\uff79\001\002\000\004\123\110\001\002" +
    "\000\004\115\111\001\002\000\004\004\uff5c\001\002\000" +
    "\004\004\113\001\002\000\076\002\uff5b\003\uff5b\005\uff5b" +
    "\015\uff5b\047\uff5b\053\uff5b\055\uff5b\061\uff5b\062\uff5b\063" +
    "\uff5b\064\uff5b\065\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b" +
    "\121\uff5b\122\uff5b\126\uff5b\130\uff5b\147\uff5b\150\uff5b\152" +
    "\uff5b\153\uff5b\154\uff5b\155\uff5b\156\uff5b\157\uff5b\166\uff5b" +
    "\170\uff5b\001\002\000\004\004\115\001\002\000\076\002" +
    "\uff44\003\uff44\005\uff44\015\uff44\047\uff44\053\uff44\055\uff44" +
    "\061\uff44\062\uff44\063\uff44\064\uff44\065\uff44\066\uff44\067" +
    "\uff44\070\uff44\071\uff44\121\uff44\122\uff44\126\uff44\130\uff44" +
    "\147\uff44\150\uff44\152\uff44\153\uff44\154\uff44\155\uff44\156" +
    "\uff44\157\uff44\166\uff44\170\uff44\001\002\000\004\115\117" +
    "\001\002\000\004\004\uff66\001\002\000\004\004\121\001" +
    "\002\000\076\002\uff65\003\uff65\005\uff65\015\uff65\047\uff65" +
    "\053\uff65\055\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065" +
    "\uff65\066\uff65\067\uff65\070\uff65\071\uff65\121\uff65\122\uff65" +
    "\126\uff65\130\uff65\147\uff65\150\uff65\152\uff65\153\uff65\154" +
    "\uff65\155\uff65\156\uff65\157\uff65\166\uff65\170\uff65\001\002" +
    "\000\006\004\124\075\123\001\002\000\010\003\126\142" +
    "\127\143\125\001\002\000\074\003\uffde\005\uffde\015\uffde" +
    "\047\uffde\053\uffde\055\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\121\uffde" +
    "\122\uffde\126\uffde\130\uffde\147\uffde\150\uffde\152\uffde\153" +
    "\uffde\154\uffde\155\uffde\156\uffde\157\uffde\166\uffde\170\uffde" +
    "\001\002\000\004\004\132\001\002\000\004\004\131\001" +
    "\002\000\004\004\130\001\002\000\074\003\uffd6\005\uffd6" +
    "\015\uffd6\047\uffd6\053\uffd6\055\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6" +
    "\121\uffd6\122\uffd6\126\uffd6\130\uffd6\147\uffd6\150\uffd6\152" +
    "\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6\157\uffd6\166\uffd6" +
    "\170\uffd6\001\002\000\074\003\uffd4\005\uffd4\015\uffd4\047" +
    "\uffd4\053\uffd4\055\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\121\uffd4\122" +
    "\uffd4\126\uffd4\130\uffd4\147\uffd4\150\uffd4\152\uffd4\153\uffd4" +
    "\154\uffd4\155\uffd4\156\uffd4\157\uffd4\166\uffd4\170\uffd4\001" +
    "\002\000\074\003\uffd5\005\uffd5\015\uffd5\047\uffd5\053\uffd5" +
    "\055\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\121\uffd5\122\uffd5\126\uffd5" +
    "\130\uffd5\147\uffd5\150\uffd5\152\uffd5\153\uffd5\154\uffd5\155" +
    "\uffd5\156\uffd5\157\uffd5\166\uffd5\170\uffd5\001\002\000\020" +
    "\003\136\025\141\026\137\051\134\052\140\054\135\144" +
    "\142\001\002\000\004\114\172\001\002\000\004\114\166" +
    "\001\002\000\004\004\uff4d\001\002\000\004\114\160\001" +
    "\002\000\004\114\154\001\002\000\004\114\150\001\002" +
    "\000\004\114\144\001\002\000\076\002\uff6b\003\uff6b\005" +
    "\uff6b\015\uff6b\047\uff6b\053\uff6b\055\uff6b\061\uff6b\062\uff6b" +
    "\063\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071" +
    "\uff6b\121\uff6b\122\uff6b\126\uff6b\130\uff6b\147\uff6b\150\uff6b" +
    "\152\uff6b\153\uff6b\154\uff6b\155\uff6b\156\uff6b\157\uff6b\166" +
    "\uff6b\170\uff6b\001\002\000\004\115\145\001\002\000\004" +
    "\004\uff59\001\002\000\004\004\147\001\002\000\076\002" +
    "\uff58\003\uff58\005\uff58\015\uff58\047\uff58\053\uff58\055\uff58" +
    "\061\uff58\062\uff58\063\uff58\064\uff58\065\uff58\066\uff58\067" +
    "\uff58\070\uff58\071\uff58\121\uff58\122\uff58\126\uff58\130\uff58" +
    "\147\uff58\150\uff58\152\uff58\153\uff58\154\uff58\155\uff58\156" +
    "\uff58\157\uff58\166\uff58\170\uff58\001\002\000\004\115\151" +
    "\001\002\000\004\004\uff53\001\002\000\004\004\153\001" +
    "\002\000\076\002\uff52\003\uff52\005\uff52\015\uff52\047\uff52" +
    "\053\uff52\055\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065" +
    "\uff52\066\uff52\067\uff52\070\uff52\071\uff52\121\uff52\122\uff52" +
    "\126\uff52\130\uff52\147\uff52\150\uff52\152\uff52\153\uff52\154" +
    "\uff52\155\uff52\156\uff52\157\uff52\166\uff52\170\uff52\001\002" +
    "\000\004\115\155\001\002\000\004\004\uff4f\001\002\000" +
    "\004\004\157\001\002\000\076\002\uff4e\003\uff4e\005\uff4e" +
    "\015\uff4e\047\uff4e\053\uff4e\055\uff4e\061\uff4e\062\uff4e\063" +
    "\uff4e\064\uff4e\065\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e" +
    "\121\uff4e\122\uff4e\126\uff4e\130\uff4e\147\uff4e\150\uff4e\152" +
    "\uff4e\153\uff4e\154\uff4e\155\uff4e\156\uff4e\157\uff4e\166\uff4e" +
    "\170\uff4e\001\002\000\004\115\161\001\002\000\004\004" +
    "\uff55\001\002\000\004\004\163\001\002\000\076\002\uff54" +
    "\003\uff54\005\uff54\015\uff54\047\uff54\053\uff54\055\uff54\061" +
    "\uff54\062\uff54\063\uff54\064\uff54\065\uff54\066\uff54\067\uff54" +
    "\070\uff54\071\uff54\121\uff54\122\uff54\126\uff54\130\uff54\147" +
    "\uff54\150\uff54\152\uff54\153\uff54\154\uff54\155\uff54\156\uff54" +
    "\157\uff54\166\uff54\170\uff54\001\002\000\004\004\165\001" +
    "\002\000\076\002\uff4c\003\uff4c\005\uff4c\015\uff4c\047\uff4c" +
    "\053\uff4c\055\uff4c\061\uff4c\062\uff4c\063\uff4c\064\uff4c\065" +
    "\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c\121\uff4c\122\uff4c" +
    "\126\uff4c\130\uff4c\147\uff4c\150\uff4c\152\uff4c\153\uff4c\154" +
    "\uff4c\155\uff4c\156\uff4c\157\uff4c\166\uff4c\170\uff4c\001\002" +
    "\000\004\115\167\001\002\000\004\004\uff57\001\002\000" +
    "\004\004\171\001\002\000\076\002\uff56\003\uff56\005\uff56" +
    "\015\uff56\047\uff56\053\uff56\055\uff56\061\uff56\062\uff56\063" +
    "\uff56\064\uff56\065\uff56\066\uff56\067\uff56\070\uff56\071\uff56" +
    "\121\uff56\122\uff56\126\uff56\130\uff56\147\uff56\150\uff56\152" +
    "\uff56\153\uff56\154\uff56\155\uff56\156\uff56\157\uff56\166\uff56" +
    "\170\uff56\001\002\000\004\115\173\001\002\000\004\004" +
    "\uff51\001\002\000\004\004\175\001\002\000\076\002\uff50" +
    "\003\uff50\005\uff50\015\uff50\047\uff50\053\uff50\055\uff50\061" +
    "\uff50\062\uff50\063\uff50\064\uff50\065\uff50\066\uff50\067\uff50" +
    "\070\uff50\071\uff50\121\uff50\122\uff50\126\uff50\130\uff50\147" +
    "\uff50\150\uff50\152\uff50\153\uff50\154\uff50\155\uff50\156\uff50" +
    "\157\uff50\166\uff50\170\uff50\001\002\000\020\114\202\122" +
    "\203\123\206\127\200\134\201\142\205\143\204\001\002" +
    "\000\004\004\241\001\002\000\040\003\uff2e\004\uff2e\076" +
    "\uff2e\077\uff2e\100\uff2e\101\uff2e\102\uff2e\103\uff2e\104\uff2e" +
    "\105\uff2e\106\uff2e\107\uff2e\110\uff2e\111\uff2e\115\uff2e\001" +
    "\002\000\040\003\uff2f\004\uff2f\076\uff2f\077\uff2f\100\uff2f" +
    "\101\uff2f\102\uff2f\103\uff2f\104\uff2f\105\uff2f\106\uff2f\107" +
    "\uff2f\110\uff2f\111\uff2f\115\uff2f\001\002\000\022\003\231" +
    "\114\202\122\203\123\206\127\200\134\201\142\205\143" +
    "\204\001\002\000\040\003\uff2d\004\uff2d\076\uff2d\077\uff2d" +
    "\100\uff2d\101\uff2d\102\uff2d\103\uff2d\104\uff2d\105\uff2d\106" +
    "\uff2d\107\uff2d\110\uff2d\111\uff2d\115\uff2d\001\002\000\040" +
    "\003\uff2b\004\uff2b\076\uff2b\077\uff2b\100\uff2b\101\uff2b\102" +
    "\uff2b\103\uff2b\104\uff2b\105\uff2b\106\uff2b\107\uff2b\110\uff2b" +
    "\111\uff2b\115\uff2b\001\002\000\040\003\uff2c\004\uff2c\076" +
    "\uff2c\077\uff2c\100\uff2c\101\uff2c\102\uff2c\103\uff2c\104\uff2c" +
    "\105\uff2c\106\uff2c\107\uff2c\110\uff2c\111\uff2c\115\uff2c\001" +
    "\002\000\040\003\uff30\004\uff30\076\uff30\077\uff30\100\uff30" +
    "\101\uff30\102\uff30\103\uff30\104\uff30\105\uff30\106\uff30\107" +
    "\uff30\110\uff30\111\uff30\115\uff30\001\002\000\014\004\214" +
    "\104\212\105\211\106\213\107\210\001\002\000\022\003" +
    "\227\114\uff33\122\uff33\123\uff33\127\uff33\134\uff33\142\uff33" +
    "\143\uff33\001\002\000\022\003\224\114\uff37\122\uff37\123" +
    "\uff37\127\uff37\134\uff37\142\uff37\143\uff37\001\002\000\022" +
    "\003\220\114\uff39\122\uff39\123\uff39\127\uff39\134\uff39\142" +
    "\uff39\143\uff39\001\002\000\022\003\216\114\uff35\122\uff35" +
    "\123\uff35\127\uff35\134\uff35\142\uff35\143\uff35\001\002\000" +
    "\076\002\uff40\003\uff40\005\uff40\015\uff40\047\uff40\053\uff40" +
    "\055\uff40\061\uff40\062\uff40\063\uff40\064\uff40\065\uff40\066" +
    "\uff40\067\uff40\070\uff40\071\uff40\121\uff40\122\uff40\126\uff40" +
    "\130\uff40\147\uff40\150\uff40\152\uff40\153\uff40\154\uff40\155" +
    "\uff40\156\uff40\157\uff40\166\uff40\170\uff40\001\002\000\020" +
    "\114\202\122\203\123\206\127\200\134\201\142\205\143" +
    "\204\001\002\000\040\003\uff28\004\uff28\076\uff28\077\uff28" +
    "\100\uff28\101\uff28\102\uff28\103\uff28\104\uff28\105\uff28\106" +
    "\uff28\107\uff28\110\uff28\111\uff28\115\uff28\001\002\000\040" +
    "\003\uff34\004\uff34\076\uff34\077\uff34\100\uff34\101\uff34\102" +
    "\uff34\103\uff34\104\uff34\105\uff34\106\uff34\107\uff34\110\uff34" +
    "\111\uff34\115\uff34\001\002\000\040\003\uff2a\004\uff2a\076" +
    "\uff2a\077\uff2a\100\uff2a\101\uff2a\102\uff2a\103\uff2a\104\uff2a" +
    "\105\uff2a\106\uff2a\107\uff2a\110\uff2a\111\uff2a\115\uff2a\001" +
    "\002\000\020\114\202\122\203\123\206\127\200\134\201" +
    "\142\205\143\204\001\002\000\040\003\uff38\004\uff38\076" +
    "\uff38\077\uff38\100\uff38\101\uff38\102\uff38\103\uff38\104\uff38" +
    "\105\uff38\106\213\107\210\110\uff38\111\uff38\115\uff38\001" +
    "\002\000\020\114\202\122\203\123\206\127\200\134\201" +
    "\142\205\143\204\001\002\000\040\003\uff29\004\uff29\076" +
    "\uff29\077\uff29\100\uff29\101\uff29\102\uff29\103\uff29\104\uff29" +
    "\105\uff29\106\uff29\107\uff29\110\uff29\111\uff29\115\uff29\001" +
    "\002\000\040\003\uff36\004\uff36\076\uff36\077\uff36\100\uff36" +
    "\101\uff36\102\uff36\103\uff36\104\uff36\105\uff36\106\213\107" +
    "\210\110\uff36\111\uff36\115\uff36\001\002\000\020\114\202" +
    "\122\203\123\206\127\200\134\201\142\205\143\204\001" +
    "\002\000\040\003\uff27\004\uff27\076\uff27\077\uff27\100\uff27" +
    "\101\uff27\102\uff27\103\uff27\104\uff27\105\uff27\106\uff27\107" +
    "\uff27\110\uff27\111\uff27\115\uff27\001\002\000\040\003\uff32" +
    "\004\uff32\076\uff32\077\uff32\100\uff32\101\uff32\102\uff32\103" +
    "\uff32\104\uff32\105\uff32\106\uff32\107\uff32\110\uff32\111\uff32" +
    "\115\uff32\001\002\000\022\114\202\115\236\122\203\123" +
    "\206\127\200\134\201\142\205\143\204\001\002\000\016" +
    "\003\234\104\212\105\211\106\213\107\210\115\233\001" +
    "\002\000\040\003\uff31\004\uff31\076\uff31\077\uff31\100\uff31" +
    "\101\uff31\102\uff31\103\uff31\104\uff31\105\uff31\106\uff31\107" +
    "\uff31\110\uff31\111\uff31\115\uff31\001\002\000\004\115\235" +
    "\001\002\000\040\003\uff26\004\uff26\076\uff26\077\uff26\100" +
    "\uff26\101\uff26\102\uff26\103\uff26\104\uff26\105\uff26\106\uff26" +
    "\107\uff26\110\uff26\111\uff26\115\uff26\001\002\000\040\003" +
    "\uff24\004\uff24\076\uff24\077\uff24\100\uff24\101\uff24\102\uff24" +
    "\103\uff24\104\uff24\105\uff24\106\uff24\107\uff24\110\uff24\111" +
    "\uff24\115\uff24\001\002\000\014\104\212\105\211\106\213" +
    "\107\210\115\240\001\002\000\040\003\uff25\004\uff25\076" +
    "\uff25\077\uff25\100\uff25\101\uff25\102\uff25\103\uff25\104\uff25" +
    "\105\uff25\106\uff25\107\uff25\110\uff25\111\uff25\115\uff25\001" +
    "\002\000\076\002\uff41\003\uff41\005\uff41\015\uff41\047\uff41" +
    "\053\uff41\055\uff41\061\uff41\062\uff41\063\uff41\064\uff41\065" +
    "\uff41\066\uff41\067\uff41\070\uff41\071\uff41\121\uff41\122\uff41" +
    "\126\uff41\130\uff41\147\uff41\150\uff41\152\uff41\153\uff41\154" +
    "\uff41\155\uff41\156\uff41\157\uff41\166\uff41\170\uff41\001\002" +
    "\000\074\003\050\005\040\015\067\047\064\053\024\055" +
    "\071\061\044\062\042\063\046\064\065\065\072\066\045" +
    "\067\047\070\043\071\021\121\053\122\063\126\055\130" +
    "\037\147\036\150\026\152\060\153\035\154\022\155\066" +
    "\156\054\157\041\166\025\170\051\001\002\000\004\002" +
    "\ufff4\001\002\000\004\123\245\001\002\000\004\115\246" +
    "\001\002\000\004\004\uff62\001\002\000\004\004\250\001" +
    "\002\000\076\002\uff61\003\uff61\005\uff61\015\uff61\047\uff61" +
    "\053\uff61\055\uff61\061\uff61\062\uff61\063\uff61\064\uff61\065" +
    "\uff61\066\uff61\067\uff61\070\uff61\071\uff61\121\uff61\122\uff61" +
    "\126\uff61\130\uff61\147\uff61\150\uff61\152\uff61\153\uff61\154" +
    "\uff61\155\uff61\156\uff61\157\uff61\166\uff61\170\uff61\001\002" +
    "\000\074\003\050\005\040\015\067\047\064\053\024\055" +
    "\071\061\044\062\042\063\046\064\065\065\072\066\045" +
    "\067\047\070\043\071\021\121\053\122\063\126\055\130" +
    "\037\147\036\150\026\152\060\153\035\154\022\155\066" +
    "\156\054\157\041\166\025\170\051\001\002\000\004\002" +
    "\uffec\001\002\000\004\003\254\001\002\000\004\004\255" +
    "\001\002\000\076\002\uffc1\003\uffc1\005\uffc1\015\uffc1\047" +
    "\uffc1\053\uffc1\055\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\121\uffc1\122" +
    "\uffc1\126\uffc1\130\uffc1\147\uffc1\150\uffc1\152\uffc1\153\uffc1" +
    "\154\uffc1\155\uffc1\156\uffc1\157\uffc1\166\uffc1\170\uffc1\001" +
    "\002\000\004\115\257\001\002\000\004\004\uff68\001\002" +
    "\000\004\004\261\001\002\000\076\002\uff67\003\uff67\005" +
    "\uff67\015\uff67\047\uff67\053\uff67\055\uff67\061\uff67\062\uff67" +
    "\063\uff67\064\uff67\065\uff67\066\uff67\067\uff67\070\uff67\071" +
    "\uff67\121\uff67\122\uff67\126\uff67\130\uff67\147\uff67\150\uff67" +
    "\152\uff67\153\uff67\154\uff67\155\uff67\156\uff67\157\uff67\166" +
    "\uff67\170\uff67\001\002\000\004\004\263\001\002\000\006" +
    "\002\uffcf\003\264\001\002\000\004\002\uffce\001\002\000" +
    "\006\004\uffe6\005\266\001\002\000\004\122\271\001\002" +
    "\000\004\004\270\001\002\000\074\003\uffe5\005\uffe5\015" +
    "\uffe5\047\uffe5\053\uffe5\055\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\121" +
    "\uffe5\122\uffe5\126\uffe5\130\uffe5\147\uffe5\150\uffe5\152\uffe5" +
    "\153\uffe5\154\uffe5\155\uffe5\156\uffe5\157\uffe5\166\uffe5\170" +
    "\uffe5\001\002\000\004\004\uffe4\001\002\000\004\004\273" +
    "\001\002\000\074\003\uffe3\005\uffe3\015\uffe3\047\uffe3\053" +
    "\uffe3\055\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\067\uffe3\070\uffe3\071\uffe3\121\uffe3\122\uffe3\126" +
    "\uffe3\130\uffe3\147\uffe3\150\uffe3\152\uffe3\153\uffe3\154\uffe3" +
    "\155\uffe3\156\uffe3\157\uffe3\166\uffe3\170\uffe3\001\002\000" +
    "\004\004\277\001\002\000\074\003\050\005\040\015\067" +
    "\047\064\053\024\055\071\061\044\062\042\063\046\064" +
    "\065\065\072\066\045\067\047\070\043\071\021\121\053" +
    "\122\063\126\055\130\037\147\036\150\026\152\060\153" +
    "\035\154\022\155\066\156\054\157\041\166\025\170\051" +
    "\001\002\000\004\002\ufff0\001\002\000\076\002\uffc3\003" +
    "\uffc3\005\uffc3\015\uffc3\047\uffc3\053\uffc3\055\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070" +
    "\uffc3\071\uffc3\121\uffc3\122\uffc3\126\uffc3\130\uffc3\147\uffc3" +
    "\150\uffc3\152\uffc3\153\uffc3\154\uffc3\155\uffc3\156\uffc3\157" +
    "\uffc3\166\uffc3\170\uffc3\001\002\000\004\061\302\001\002" +
    "\000\074\003\uff85\005\uff85\015\uff85\047\uff85\053\uff85\055" +
    "\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85" +
    "\067\uff85\070\uff85\071\uff85\121\uff85\122\uff85\126\uff85\130" +
    "\uff85\147\uff85\150\uff85\152\uff85\153\uff85\154\uff85\155\uff85" +
    "\156\uff85\157\uff85\166\uff85\170\uff85\001\002\000\004\122" +
    "\303\001\002\000\004\075\304\001\002\000\004\123\305" +
    "\001\002\000\004\004\306\001\002\000\032\003\314\047" +
    "\313\054\307\114\202\122\203\123\206\127\200\134\201" +
    "\142\205\143\204\155\310\166\316\001\002\000\004\114" +
    "\u012b\001\002\000\004\114\u0129\001\002\000\014\004\uff9f" +
    "\076\u0121\110\u0120\111\u0122\115\uff9f\001\002\000\004\004" +
    "\uff84\001\002\000\004\005\362\001\002\000\006\004\uff9e" +
    "\115\uff9e\001\002\000\032\076\336\077\332\100\335\101" +
    "\331\102\330\103\337\104\212\105\211\106\213\107\210" +
    "\110\333\111\334\001\002\000\004\005\317\001\002\000" +
    "\010\003\322\054\321\144\323\001\002\000\014\004\uff89" +
    "\076\uff89\110\uff89\111\uff89\115\uff89\001\002\000\004\114" +
    "\326\001\002\000\014\004\uff7d\076\uff7d\110\uff7d\111\uff7d" +
    "\115\uff7d\001\002\000\004\114\324\001\002\000\004\115" +
    "\325\001\002\000\014\004\uff7f\076\uff7f\110\uff7f\111\uff7f" +
    "\115\uff7f\001\002\000\004\115\327\001\002\000\014\004" +
    "\uff7e\076\uff7e\110\uff7e\111\uff7e\115\uff7e\001\002\000\020" +
    "\114\202\122\203\123\206\127\200\134\201\142\205\143" +
    "\204\001\002\000\020\114\202\122\203\123\206\127\200" +
    "\134\201\142\205\143\204\001\002\000\020\114\uffb0\122" +
    "\uffb0\123\uffb0\127\uffb0\134\uffb0\142\uffb0\143\uffb0\001\002" +
    "\000\030\047\313\054\307\114\uffad\122\uffad\123\uffad\127" +
    "\uffad\134\uffad\142\uffad\143\uffad\155\310\166\316\001\002" +
    "\000\030\047\313\054\307\114\uffab\122\uffab\123\uffab\127" +
    "\uffab\134\uffab\142\uffab\143\uffab\155\310\166\316\001\002" +
    "\000\020\114\uffb3\122\uffb3\123\uffb3\127\uffb3\134\uffb3\142" +
    "\uffb3\143\uffb3\001\002\000\030\047\313\054\307\114\uffb7" +
    "\122\uffb7\123\uffb7\127\uffb7\134\uffb7\142\uffb7\143\uffb7\155" +
    "\310\166\316\001\002\000\030\047\313\054\307\114\uffb5" +
    "\122\uffb5\123\uffb5\127\uffb5\134\uffb5\142\uffb5\143\uffb5\155" +
    "\310\166\316\001\002\000\006\004\uffa5\115\uffa5\001\002" +
    "\000\020\114\202\122\203\123\206\127\200\134\201\142" +
    "\205\143\204\001\002\000\016\004\uffb4\104\212\105\211" +
    "\106\213\107\210\115\uffb4\001\002\000\006\004\uffa6\115" +
    "\uffa6\001\002\000\020\114\202\122\203\123\206\127\200" +
    "\134\201\142\205\143\204\001\002\000\016\004\uffb6\104" +
    "\212\105\211\106\213\107\210\115\uffb6\001\002\000\020" +
    "\114\202\122\203\123\206\127\200\134\201\142\205\143" +
    "\204\001\002\000\016\004\uffb2\104\212\105\211\106\213" +
    "\107\210\115\uffb2\001\002\000\006\004\uffa3\115\uffa3\001" +
    "\002\000\020\114\202\122\203\123\206\127\200\134\201" +
    "\142\205\143\204\001\002\000\016\004\uffaa\104\212\105" +
    "\211\106\213\107\210\115\uffaa\001\002\000\020\114\202" +
    "\122\203\123\206\127\200\134\201\142\205\143\204\001" +
    "\002\000\006\004\uffa4\115\uffa4\001\002\000\016\004\uffac" +
    "\104\212\105\211\106\213\107\210\115\uffac\001\002\000" +
    "\020\114\202\122\203\123\206\127\200\134\201\142\205" +
    "\143\204\001\002\000\016\004\uffaf\104\212\105\211\106" +
    "\213\107\210\115\uffaf\001\002\000\016\004\uffb1\104\212" +
    "\105\211\106\213\107\210\115\uffb1\001\002\000\016\004" +
    "\uffae\104\212\105\211\106\213\107\210\115\uffae\001\002" +
    "\000\010\003\322\054\321\144\323\001\002\000\014\004" +
    "\uff88\076\uff88\110\uff88\111\uff88\115\uff88\001\002\000\004" +
    "\004\365\001\002\000\004\122\366\001\002\000\004\112" +
    "\367\001\002\000\004\115\370\001\002\000\006\003\371" +
    "\120\372\001\002\000\074\003\uff81\005\uff81\015\uff81\047" +
    "\uff81\053\uff81\055\uff81\061\uff81\062\uff81\063\uff81\064\uff81" +
    "\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\121\uff81\122" +
    "\uff81\126\uff81\130\uff81\147\uff81\150\uff81\152\uff81\153\uff81" +
    "\154\uff81\155\uff81\156\uff81\157\uff81\166\uff81\170\uff81\001" +
    "\002\000\054\003\u0103\005\040\015\067\047\064\053\024" +
    "\055\071\065\072\066\045\071\021\121\377\122\063\126" +
    "\376\147\374\150\026\152\060\153\035\154\022\155\066" +
    "\156\054\157\041\166\025\001\002\000\074\003\uff83\005" +
    "\uff83\015\uff83\047\uff83\053\uff83\055\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071" +
    "\uff83\121\uff83\122\uff83\126\uff83\130\uff83\147\uff83\150\uff83" +
    "\152\uff83\153\uff83\154\uff83\155\uff83\156\uff83\157\uff83\166" +
    "\uff83\170\uff83\001\002\000\004\004\uff8f\001\002\000\054" +
    "\003\uff9b\005\uff9b\015\uff9b\047\uff9b\053\uff9b\055\uff9b\065" +
    "\uff9b\066\uff9b\071\uff9b\121\uff9b\122\uff9b\126\uff9b\147\uff9b" +
    "\150\uff9b\152\uff9b\153\uff9b\154\uff9b\155\uff9b\156\uff9b\157" +
    "\uff9b\166\uff9b\001\002\000\004\004\uff91\001\002\000\102" +
    "\002\uff8d\003\uff8d\005\uff8d\015\uff8d\047\uff8d\053\uff8d\055" +
    "\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d" +
    "\067\uff8d\070\uff8d\071\uff8d\072\u0112\115\u0111\121\uff8d\122" +
    "\uff8d\126\uff8d\130\uff8d\147\uff8d\150\uff8d\152\uff8d\153\uff8d" +
    "\154\uff8d\155\uff8d\156\uff8d\157\uff8d\166\uff8d\170\uff8d\001" +
    "\002\000\054\003\uff9d\005\uff9d\015\uff9d\047\uff9d\053\uff9d" +
    "\055\uff9d\065\uff9d\066\uff9d\071\uff9d\121\uff9d\122\uff9d\126" +
    "\uff9d\147\uff9d\150\uff9d\152\uff9d\153\uff9d\154\uff9d\155\uff9d" +
    "\156\uff9d\157\uff9d\166\uff9d\001\002\000\054\003\uff95\005" +
    "\uff95\015\uff95\047\uff95\053\uff95\055\uff95\065\uff95\066\uff95" +
    "\071\uff95\121\uff95\122\uff95\126\uff95\147\uff95\150\uff95\152" +
    "\uff95\153\uff95\154\uff95\155\uff95\156\uff95\157\uff95\166\uff95" +
    "\001\002\000\054\003\uff99\005\uff99\015\uff99\047\uff99\053" +
    "\uff99\055\uff99\065\uff99\066\uff99\071\uff99\121\uff99\122\uff99" +
    "\126\uff99\147\uff99\150\uff99\152\uff99\153\uff99\154\uff99\155" +
    "\uff99\156\uff99\157\uff99\166\uff99\001\002\000\100\002\uff8a" +
    "\003\uff8a\004\uff93\005\uff8a\015\uff8a\047\uff8a\053\uff8a\055" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\070\uff8a\071\uff8a\121\uff8a\122\uff8a\126\uff8a\130" +
    "\uff8a\147\uff8a\150\uff8a\152\uff8a\153\uff8a\154\uff8a\155\uff8a" +
    "\156\uff8a\157\uff8a\166\uff8a\170\uff8a\001\002\000\074\003" +
    "\uff82\005\uff82\015\uff82\047\uff82\053\uff82\055\uff82\061\uff82" +
    "\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070" +
    "\uff82\071\uff82\121\uff82\122\uff82\126\uff82\130\uff82\147\uff82" +
    "\150\uff82\152\uff82\153\uff82\154\uff82\155\uff82\156\uff82\157" +
    "\uff82\166\uff82\170\uff82\001\002\000\054\003\uff97\005\uff97" +
    "\015\uff97\047\uff97\053\uff97\055\uff97\065\uff97\066\uff97\071" +
    "\uff97\121\uff97\122\uff97\126\uff97\147\uff97\150\uff97\152\uff97" +
    "\153\uff97\154\uff97\155\uff97\156\uff97\157\uff97\166\uff97\001" +
    "\002\000\054\003\u0103\005\040\015\067\047\064\053\024" +
    "\055\071\065\072\066\045\071\021\121\377\122\063\126" +
    "\376\147\374\150\026\152\060\153\035\154\022\155\066" +
    "\156\054\157\041\166\025\001\002\000\076\002\uff96\003" +
    "\uff96\005\uff96\015\uff96\047\uff96\053\uff96\055\uff96\061\uff96" +
    "\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070" +
    "\uff96\071\uff96\121\uff96\122\uff96\126\uff96\130\uff96\147\uff96" +
    "\150\uff96\152\uff96\153\uff96\154\uff96\155\uff96\156\uff96\157" +
    "\uff96\166\uff96\170\uff96\001\002\000\004\004\u0109\001\002" +
    "\000\054\003\u0103\005\040\015\067\047\064\053\024\055" +
    "\071\065\072\066\045\071\021\121\377\122\063\126\376" +
    "\147\374\150\026\152\060\153\035\154\022\155\066\156" +
    "\054\157\041\166\025\001\002\000\076\002\uff92\003\uff92" +
    "\005\uff92\015\uff92\047\uff92\053\uff92\055\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92" +
    "\071\uff92\121\uff92\122\uff92\126\uff92\130\uff92\147\uff92\150" +
    "\uff92\152\uff92\153\uff92\154\uff92\155\uff92\156\uff92\157\uff92" +
    "\166\uff92\170\uff92\001\002\000\054\003\u0103\005\040\015" +
    "\067\047\064\053\024\055\071\065\072\066\045\071\021" +
    "\121\377\122\063\126\376\147\374\150\026\152\060\153" +
    "\035\154\022\155\066\156\054\157\041\166\025\001\002" +
    "\000\076\002\uff98\003\uff98\005\uff98\015\uff98\047\uff98\053" +
    "\uff98\055\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98" +
    "\066\uff98\067\uff98\070\uff98\071\uff98\121\uff98\122\uff98\126" +
    "\uff98\130\uff98\147\uff98\150\uff98\152\uff98\153\uff98\154\uff98" +
    "\155\uff98\156\uff98\157\uff98\166\uff98\170\uff98\001\002\000" +
    "\054\003\u0103\005\040\015\067\047\064\053\024\055\071" +
    "\065\072\066\045\071\021\121\377\122\063\126\376\147" +
    "\374\150\026\152\060\153\035\154\022\155\066\156\054" +
    "\157\041\166\025\001\002\000\076\002\uff94\003\uff94\005" +
    "\uff94\015\uff94\047\uff94\053\uff94\055\uff94\061\uff94\062\uff94" +
    "\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071" +
    "\uff94\121\uff94\122\uff94\126\uff94\130\uff94\147\uff94\150\uff94" +
    "\152\uff94\153\uff94\154\uff94\155\uff94\156\uff94\157\uff94\166" +
    "\uff94\170\uff94\001\002\000\054\003\u0103\005\040\015\067" +
    "\047\064\053\024\055\071\065\072\066\045\071\021\121" +
    "\377\122\063\126\376\147\374\150\026\152\060\153\035" +
    "\154\022\155\066\156\054\157\041\166\025\001\002\000" +
    "\076\002\uff9c\003\uff9c\005\uff9c\015\uff9c\047\uff9c\053\uff9c" +
    "\055\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\070\uff9c\071\uff9c\121\uff9c\122\uff9c\126\uff9c" +
    "\130\uff9c\147\uff9c\150\uff9c\152\uff9c\153\uff9c\154\uff9c\155" +
    "\uff9c\156\uff9c\157\uff9c\166\uff9c\170\uff9c\001\002\000\004" +
    "\004\u0117\001\002\000\006\003\u0114\120\u0115\001\002\000" +
    "\076\002\uff8c\003\uff8c\005\uff8c\015\uff8c\047\uff8c\053\uff8c" +
    "\055\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066" +
    "\uff8c\067\uff8c\070\uff8c\071\uff8c\121\uff8c\122\uff8c\126\uff8c" +
    "\130\uff8c\147\uff8c\150\uff8c\152\uff8c\153\uff8c\154\uff8c\155" +
    "\uff8c\156\uff8c\157\uff8c\166\uff8c\170\uff8c\001\002\000\076" +
    "\002\uffb8\003\uffb8\005\uffb8\015\uffb8\047\uffb8\053\uffb8\055" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\070\uffb8\071\uffb8\121\uffb8\122\uffb8\126\uffb8\130" +
    "\uffb8\147\uffb8\150\uffb8\152\uffb8\153\uffb8\154\uffb8\155\uffb8" +
    "\156\uffb8\157\uffb8\166\uffb8\170\uffb8\001\002\000\054\003" +
    "\u0103\005\040\015\067\047\064\053\024\055\071\065\072" +
    "\066\045\071\021\121\377\122\063\126\376\147\374\150" +
    "\026\152\060\153\035\154\022\155\066\156\054\157\041" +
    "\166\025\001\002\000\076\002\uffb9\003\uffb9\005\uffb9\015" +
    "\uffb9\047\uffb9\053\uffb9\055\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\121" +
    "\uffb9\122\uffb9\126\uffb9\130\uffb9\147\uffb9\150\uffb9\152\uffb9" +
    "\153\uffb9\154\uffb9\155\uffb9\156\uffb9\157\uffb9\166\uffb9\170" +
    "\uffb9\001\002\000\076\002\uff8b\003\uff8b\005\uff8b\015\uff8b" +
    "\047\uff8b\053\uff8b\055\uff8b\061\uff8b\062\uff8b\063\uff8b\064" +
    "\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\121\uff8b" +
    "\122\uff8b\126\uff8b\130\uff8b\147\uff8b\150\uff8b\152\uff8b\153" +
    "\uff8b\154\uff8b\155\uff8b\156\uff8b\157\uff8b\166\uff8b\170\uff8b" +
    "\001\002\000\004\004\u0119\001\002\000\054\003\u0103\005" +
    "\040\015\067\047\064\053\024\055\071\065\072\066\045" +
    "\071\021\121\377\122\063\126\376\147\374\150\026\152" +
    "\060\153\035\154\022\155\066\156\054\157\041\166\025" +
    "\001\002\000\076\002\uff90\003\uff90\005\uff90\015\uff90\047" +
    "\uff90\053\uff90\055\uff90\061\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\121\uff90\122" +
    "\uff90\126\uff90\130\uff90\147\uff90\150\uff90\152\uff90\153\uff90" +
    "\154\uff90\155\uff90\156\uff90\157\uff90\166\uff90\170\uff90\001" +
    "\002\000\054\003\u0103\005\040\015\067\047\064\053\024" +
    "\055\071\065\072\066\045\071\021\121\377\122\063\126" +
    "\376\147\374\150\026\152\060\153\035\154\022\155\066" +
    "\156\054\157\041\166\025\001\002\000\076\002\uff9a\003" +
    "\uff9a\005\uff9a\015\uff9a\047\uff9a\053\uff9a\055\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\071\uff9a\121\uff9a\122\uff9a\126\uff9a\130\uff9a\147\uff9a" +
    "\150\uff9a\152\uff9a\153\uff9a\154\uff9a\155\uff9a\156\uff9a\157" +
    "\uff9a\166\uff9a\170\uff9a\001\002\000\004\004\u011e\001\002" +
    "\000\054\003\u0103\005\040\015\067\047\064\053\024\055" +
    "\071\065\072\066\045\071\021\121\377\122\063\126\376" +
    "\147\374\150\026\152\060\153\035\154\022\155\066\156" +
    "\054\157\041\166\025\001\002\000\076\002\uff8e\003\uff8e" +
    "\005\uff8e\015\uff8e\047\uff8e\053\uff8e\055\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e" +
    "\071\uff8e\121\uff8e\122\uff8e\126\uff8e\130\uff8e\147\uff8e\150" +
    "\uff8e\152\uff8e\153\uff8e\154\uff8e\155\uff8e\156\uff8e\157\uff8e" +
    "\166\uff8e\170\uff8e\001\002\000\030\047\313\054\307\114" +
    "\202\122\203\123\206\127\200\134\201\142\205\143\204" +
    "\155\310\166\316\001\002\000\030\047\313\054\307\114" +
    "\202\122\203\123\206\127\200\134\201\142\205\143\204" +
    "\155\310\166\316\001\002\000\030\047\313\054\307\114" +
    "\202\122\203\123\206\127\200\134\201\142\205\143\204" +
    "\155\310\166\316\001\002\000\006\004\uffa0\115\uffa0\001" +
    "\002\000\016\004\uffa7\104\212\105\211\106\213\107\210" +
    "\115\uffa7\001\002\000\006\004\uffa2\115\uffa2\001\002\000" +
    "\016\004\uffa9\104\212\105\211\106\213\107\210\115\uffa9" +
    "\001\002\000\006\004\uffa1\115\uffa1\001\002\000\016\004" +
    "\uffa8\104\212\105\211\106\213\107\210\115\uffa8\001\002" +
    "\000\004\115\u012a\001\002\000\014\004\uff87\076\uff87\110" +
    "\uff87\111\uff87\115\uff87\001\002\000\004\115\u012c\001\002" +
    "\000\014\004\uff86\076\uff86\110\uff86\111\uff86\115\uff86\001" +
    "\002\000\006\004\u012f\075\u012e\001\002\000\006\003\u0130" +
    "\134\u0131\001\002\000\074\003\uffdf\005\uffdf\015\uffdf\047" +
    "\uffdf\053\uffdf\055\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\121\uffdf\122" +
    "\uffdf\126\uffdf\130\uffdf\147\uffdf\150\uffdf\152\uffdf\153\uffdf" +
    "\154\uffdf\155\uffdf\156\uffdf\157\uffdf\166\uffdf\170\uffdf\001" +
    "\002\000\004\004\u0133\001\002\000\004\004\u0132\001\002" +
    "\000\074\003\uffd8\005\uffd8\015\uffd8\047\uffd8\053\uffd8\055" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\121\uffd8\122\uffd8\126\uffd8\130" +
    "\uffd8\147\uffd8\150\uffd8\152\uffd8\153\uffd8\154\uffd8\155\uffd8" +
    "\156\uffd8\157\uffd8\166\uffd8\170\uffd8\001\002\000\074\003" +
    "\uffd7\005\uffd7\015\uffd7\047\uffd7\053\uffd7\055\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\121\uffd7\122\uffd7\126\uffd7\130\uffd7\147\uffd7" +
    "\150\uffd7\152\uffd7\153\uffd7\154\uffd7\155\uffd7\156\uffd7\157" +
    "\uffd7\166\uffd7\170\uffd7\001\002\000\004\004\uff6e\001\002" +
    "\000\004\004\uff75\001\002\000\004\004\uff77\001\002\000" +
    "\004\004\uff78\001\002\000\004\004\uff76\001\002\000\004" +
    "\004\u013a\001\002\000\076\002\uff6d\003\uff6d\005\uff6d\015" +
    "\uff6d\047\uff6d\053\uff6d\055\uff6d\061\uff6d\062\uff6d\063\uff6d" +
    "\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\121" +
    "\uff6d\122\uff6d\126\uff6d\130\uff6d\147\uff6d\150\uff6d\152\uff6d" +
    "\153\uff6d\154\uff6d\155\uff6d\156\uff6d\157\uff6d\166\uff6d\170" +
    "\uff6d\001\002\000\006\004\u013d\075\u013c\001\002\000\006" +
    "\003\u013e\123\u013f\001\002\000\074\003\uffe1\005\uffe1\015" +
    "\uffe1\047\uffe1\053\uffe1\055\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\121" +
    "\uffe1\122\uffe1\126\uffe1\130\uffe1\147\uffe1\150\uffe1\152\uffe1" +
    "\153\uffe1\154\uffe1\155\uffe1\156\uffe1\157\uffe1\166\uffe1\170" +
    "\uffe1\001\002\000\004\004\u0142\001\002\000\004\004\uffdd" +
    "\001\002\000\004\004\u0141\001\002\000\074\003\uffdc\005" +
    "\uffdc\015\uffdc\047\uffdc\053\uffdc\055\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\121\uffdc\122\uffdc\126\uffdc\130\uffdc\147\uffdc\150\uffdc" +
    "\152\uffdc\153\uffdc\154\uffdc\155\uffdc\156\uffdc\157\uffdc\166" +
    "\uffdc\170\uffdc\001\002\000\074\003\uffdb\005\uffdb\015\uffdb" +
    "\047\uffdb\053\uffdb\055\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\121\uffdb" +
    "\122\uffdb\126\uffdb\130\uffdb\147\uffdb\150\uffdb\152\uffdb\153" +
    "\uffdb\154\uffdb\155\uffdb\156\uffdb\157\uffdb\166\uffdb\170\uffdb" +
    "\001\002\000\032\003\314\047\313\054\307\114\202\122" +
    "\203\123\206\127\200\134\201\142\205\143\204\155\310" +
    "\166\316\001\002\000\004\115\u0145\001\002\000\006\003" +
    "\371\120\372\001\002\000\074\003\uff80\005\uff80\015\uff80" +
    "\047\uff80\053\uff80\055\uff80\061\uff80\062\uff80\063\uff80\064" +
    "\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\121\uff80" +
    "\122\uff80\126\uff80\130\uff80\147\uff80\150\uff80\152\uff80\153" +
    "\uff80\154\uff80\155\uff80\156\uff80\157\uff80\166\uff80\170\uff80" +
    "\001\002\000\006\004\u0149\075\u0148\001\002\000\006\003" +
    "\u014a\127\u014b\001\002\000\074\003\uffe0\005\uffe0\015\uffe0" +
    "\047\uffe0\053\uffe0\055\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\121\uffe0" +
    "\122\uffe0\126\uffe0\130\uffe0\147\uffe0\150\uffe0\152\uffe0\153" +
    "\uffe0\154\uffe0\155\uffe0\156\uffe0\157\uffe0\166\uffe0\170\uffe0" +
    "\001\002\000\004\004\u014d\001\002\000\004\004\u014c\001" +
    "\002\000\074\003\uffda\005\uffda\015\uffda\047\uffda\053\uffda" +
    "\055\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066" +
    "\uffda\067\uffda\070\uffda\071\uffda\121\uffda\122\uffda\126\uffda" +
    "\130\uffda\147\uffda\150\uffda\152\uffda\153\uffda\154\uffda\155" +
    "\uffda\156\uffda\157\uffda\166\uffda\170\uffda\001\002\000\074" +
    "\003\uffd9\005\uffd9\015\uffd9\047\uffd9\053\uffd9\055\uffd9\061" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9" +
    "\070\uffd9\071\uffd9\121\uffd9\122\uffd9\126\uffd9\130\uffd9\147" +
    "\uffd9\150\uffd9\152\uffd9\153\uffd9\154\uffd9\155\uffd9\156\uffd9" +
    "\157\uffd9\166\uffd9\170\uffd9\001\002\000\004\115\u014f\001" +
    "\002\000\004\004\uff6a\001\002\000\004\004\u0151\001\002" +
    "\000\076\002\uff69\003\uff69\005\uff69\015\uff69\047\uff69\053" +
    "\uff69\055\uff69\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69" +
    "\066\uff69\067\uff69\070\uff69\071\uff69\121\uff69\122\uff69\126" +
    "\uff69\130\uff69\147\uff69\150\uff69\152\uff69\153\uff69\154\uff69" +
    "\155\uff69\156\uff69\157\uff69\166\uff69\170\uff69\001\002\000" +
    "\076\002\uff5a\003\uff5a\005\uff5a\015\uff5a\047\uff5a\053\uff5a" +
    "\055\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066" +
    "\uff5a\067\uff5a\070\uff5a\071\uff5a\121\uff5a\122\uff5a\126\uff5a" +
    "\130\uff5a\147\uff5a\150\uff5a\152\uff5a\153\uff5a\154\uff5a\155" +
    "\uff5a\156\uff5a\157\uff5a\166\uff5a\170\uff5a\001\002\000\004" +
    "\003\u0154\001\002\000\004\004\u0155\001\002\000\076\002" +
    "\uffbf\003\uffbf\005\uffbf\015\uffbf\047\uffbf\053\uffbf\055\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\uffbf\121\uffbf\122\uffbf\126\uffbf\130\uffbf" +
    "\147\uffbf\150\uffbf\152\uffbf\153\uffbf\154\uffbf\155\uffbf\156" +
    "\uffbf\157\uffbf\166\uffbf\170\uffbf\001\002\000\004\123\u0157" +
    "\001\002\000\004\115\u0158\001\002\000\004\004\uff60\001" +
    "\002\000\004\004\u015a\001\002\000\076\002\uff5f\003\uff5f" +
    "\005\uff5f\015\uff5f\047\uff5f\053\uff5f\055\uff5f\061\uff5f\062" +
    "\uff5f\063\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\070\uff5f" +
    "\071\uff5f\121\uff5f\122\uff5f\126\uff5f\130\uff5f\147\uff5f\150" +
    "\uff5f\152\uff5f\153\uff5f\154\uff5f\155\uff5f\156\uff5f\157\uff5f" +
    "\166\uff5f\170\uff5f\001\002\000\074\003\050\005\040\015" +
    "\067\047\064\053\024\055\071\061\044\062\042\063\046" +
    "\064\065\065\072\066\045\067\047\070\043\071\021\121" +
    "\053\122\063\126\055\130\037\147\036\150\026\152\060" +
    "\153\035\154\022\155\066\156\054\157\041\166\025\170" +
    "\051\001\002\000\004\002\uffee\001\002\000\074\003\050" +
    "\005\040\015\067\047\064\053\024\055\071\061\044\062" +
    "\042\063\046\064\065\065\072\066\045\067\047\070\043" +
    "\071\021\121\053\122\063\126\055\130\037\147\036\150" +
    "\026\152\060\153\035\154\022\155\066\156\054\157\041" +
    "\166\025\170\051\001\002\000\004\002\uffea\001\002\000" +
    "\074\003\050\005\040\015\067\047\064\053\024\055\071" +
    "\061\044\062\042\063\046\064\065\065\072\066\045\067" +
    "\047\070\043\071\021\121\053\122\063\126\055\130\037" +
    "\147\036\150\026\152\060\153\035\154\022\155\066\156" +
    "\054\157\041\166\025\170\051\001\002\000\004\002\uffe8" +
    "\001\002\000\004\123\u0162\001\002\000\004\115\u0163\001" +
    "\002\000\004\004\uff70\001\002\000\004\004\u0165\001\002" +
    "\000\076\002\uff6f\003\uff6f\005\uff6f\015\uff6f\047\uff6f\053" +
    "\uff6f\055\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f" +
    "\066\uff6f\067\uff6f\070\uff6f\071\uff6f\121\uff6f\122\uff6f\126" +
    "\uff6f\130\uff6f\147\uff6f\150\uff6f\152\uff6f\153\uff6f\154\uff6f" +
    "\155\uff6f\156\uff6f\157\uff6f\166\uff6f\170\uff6f\001\002\000" +
    "\020\003\136\025\141\026\137\051\134\052\140\054\135" +
    "\144\142\001\002\000\076\002\uff6c\003\uff6c\005\uff6c\015" +
    "\uff6c\047\uff6c\053\uff6c\055\uff6c\061\uff6c\062\uff6c\063\uff6c" +
    "\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\121" +
    "\uff6c\122\uff6c\126\uff6c\130\uff6c\147\uff6c\150\uff6c\152\uff6c" +
    "\153\uff6c\154\uff6c\155\uff6c\156\uff6c\157\uff6c\166\uff6c\170" +
    "\uff6c\001\002\000\010\003\u0169\123\u016b\127\u016c\001\002" +
    "\000\004\115\uff47\001\002\000\004\115\u017c\001\002\000" +
    "\004\006\u017a\001\002\000\004\006\u016d\001\002\000\006" +
    "\123\u016f\135\u0170\001\002\000\006\006\u0178\115\uff49\001" +
    "\002\000\004\006\u0176\001\002\000\004\005\u0171\001\002" +
    "\000\004\017\u0173\001\002\000\006\006\uff46\115\uff46\001" +
    "\002\000\004\114\u0174\001\002\000\004\115\u0175\001\002" +
    "\000\006\006\uff45\115\uff45\001\002\000\004\123\u0177\001" +
    "\002\000\004\115\uff4a\001\002\000\004\127\u0179\001\002" +
    "\000\004\115\uff48\001\002\000\004\123\u017b\001\002\000" +
    "\004\115\uff4b\001\002\000\004\004\uff5e\001\002\000\004" +
    "\004\u017e\001\002\000\076\002\uff5d\003\uff5d\005\uff5d\015" +
    "\uff5d\047\uff5d\053\uff5d\055\uff5d\061\uff5d\062\uff5d\063\uff5d" +
    "\064\uff5d\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\121" +
    "\uff5d\122\uff5d\126\uff5d\130\uff5d\147\uff5d\150\uff5d\152\uff5d" +
    "\153\uff5d\154\uff5d\155\uff5d\156\uff5d\157\uff5d\166\uff5d\170" +
    "\uff5d\001\002\000\074\003\050\005\040\015\067\047\064" +
    "\053\024\055\071\061\044\062\042\063\046\064\065\065" +
    "\072\066\045\067\047\070\043\071\021\121\053\122\063" +
    "\126\055\130\037\147\036\150\026\152\060\153\035\154" +
    "\022\155\066\156\054\157\041\166\025\170\051\001\002" +
    "\000\004\002\ufff2\001\002\000\004\115\u0182\001\002\000" +
    "\004\004\uff64\001\002\000\004\004\u0184\001\002\000\076" +
    "\002\uff63\003\uff63\005\uff63\015\uff63\047\uff63\053\uff63\055" +
    "\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\066\uff63" +
    "\067\uff63\070\uff63\071\uff63\121\uff63\122\uff63\126\uff63\130" +
    "\uff63\147\uff63\150\uff63\152\uff63\153\uff63\154\uff63\155\uff63" +
    "\156\uff63\157\uff63\166\uff63\170\uff63\001\002\000\032\003" +
    "\u018b\047\313\054\307\114\202\122\203\123\206\127\200" +
    "\134\201\142\205\143\204\155\310\166\316\001\002\000" +
    "\100\002\uffba\003\uffba\005\uffba\015\uffba\047\uffba\053\uffba" +
    "\055\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\115\u0188\121\uffba\122\uffba" +
    "\126\uffba\130\uffba\147\uffba\150\uffba\152\uffba\153\uffba\154" +
    "\uffba\155\uffba\156\uffba\157\uffba\166\uffba\170\uffba\001\002" +
    "\000\076\002\uffbe\003\uffbe\005\uffbe\015\uffbe\047\uffbe\053" +
    "\uffbe\055\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\070\uffbe\071\uffbe\121\uffbe\122\uffbe\126" +
    "\uffbe\130\uffbe\147\uffbe\150\uffbe\152\uffbe\153\uffbe\154\uffbe" +
    "\155\uffbe\156\uffbe\157\uffbe\166\uffbe\170\uffbe\001\002\000" +
    "\006\003\u0114\120\u0115\001\002\000\076\002\uffbc\003\uffbc" +
    "\005\uffbc\015\uffbc\047\uffbc\053\uffbc\055\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\121\uffbc\122\uffbc\126\uffbc\130\uffbc\147\uffbc\150" +
    "\uffbc\152\uffbc\153\uffbc\154\uffbc\155\uffbc\156\uffbc\157\uffbc" +
    "\166\uffbc\170\uffbc\001\002\000\004\115\u018d\001\002\000" +
    "\010\003\u0114\115\uff9e\120\u0115\001\002\000\076\002\uffbb" +
    "\003\uffbb\005\uffbb\015\uffbb\047\uffbb\053\uffbb\055\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\121\uffbb\122\uffbb\126\uffbb\130\uffbb\147" +
    "\uffbb\150\uffbb\152\uffbb\153\uffbb\154\uffbb\155\uffbb\156\uffbb" +
    "\157\uffbb\166\uffbb\170\uffbb\001\002\000\006\003\u0114\120" +
    "\u0115\001\002\000\076\002\uffbd\003\uffbd\005\uffbd\015\uffbd" +
    "\047\uffbd\053\uffbd\055\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\121\uffbd" +
    "\122\uffbd\126\uffbd\130\uffbd\147\uffbd\150\uffbd\152\uffbd\153" +
    "\uffbd\154\uffbd\155\uffbd\156\uffbd\157\uffbd\166\uffbd\170\uffbd" +
    "\001\002\000\074\003\050\005\040\015\067\047\064\053" +
    "\024\055\071\061\044\062\042\063\046\064\065\065\072" +
    "\066\045\067\047\070\043\071\021\121\053\122\063\126" +
    "\055\130\037\147\036\150\026\152\060\153\035\154\022" +
    "\155\066\156\054\157\041\166\025\170\051\001\002\000" +
    "\004\002\ufffd\001\002\000\012\003\004\122\007\126\005" +
    "\130\006\001\002\000\004\002\ufff7\001\002\000\012\003" +
    "\004\122\007\126\005\130\006\001\002\000\004\002\ufff9" +
    "\001\002\000\012\003\004\122\007\126\005\130\006\001" +
    "\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0194\000\004\002\007\001\001\000\004\052\u0194\001" +
    "\001\000\004\053\u0192\001\001\000\004\054\u0190\001\001" +
    "\000\004\050\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u018e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\027\004\033\005\026\006\067\014\055" +
    "\017\061\024\051\027\056\035\060\036\022\037\030\042" +
    "\032\043\031\001\001\000\004\031\u0186\001\001\000\002" +
    "\001\001\000\004\056\u017e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u015e\001\001\000" +
    "\004\062\u015c\001\001\000\004\060\u015a\001\001\000\002" +
    "\001\001\000\004\071\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u0133\001\001\000" +
    "\002\001\001\000\004\047\300\001\001\000\006\057\274" +
    "\067\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\252\001\001" +
    "\000\002\001\001\000\004\061\250\001\001\000\002\001" +
    "\001\000\004\055\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\104\001\001\000\004\025" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\111" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\124\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\125\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\130\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\132\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\126\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\131\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\206\046\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\141\225\001\001\000" +
    "\004\137\222\001\001\000\004\136\220\001\001\000\004" +
    "\140\214\001\001\000\002\001\001\000\004\007\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\221\001\001\000\002\001\001\000\004\007" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\242\004\033\005\026\006\067\014\055\017\061\024" +
    "\051\027\056\035\060\036\022\037\030\042\032\043\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\251\004\033\005\026\006\067\014" +
    "\055\017\061\024\051\027\056\035\060\036\022\037\030" +
    "\042\032\043\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\116\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\275\004\033\005\026\006\067\014\055\017\061\024\051" +
    "\027\056\035\060\036\022\037\030\042\032\043\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\314\030\311" +
    "\033\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\360\001\001\000\004\007\357\001\001\000\004\075" +
    "\355\001\001\000\006\033\353\076\352\001\001\000\006" +
    "\033\347\077\350\001\001\000\004\074\345\001\001\000" +
    "\006\033\342\072\343\001\001\000\006\033\337\073\340" +
    "\001\001\000\002\001\001\000\004\007\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\344\001\001" +
    "\000\002\001\001\000\004\007\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\351\001\001\000\002" +
    "\001\001\000\004\007\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\372\001" +
    "\001\000\002\001\001\000\016\005\377\014\374\017\u0101" +
    "\024\u0104\027\u0100\034\u0103\001\001\000\002\001\001\000" +
    "\004\107\u011c\001\001\000\004\101\u011a\001\001\000\004" +
    "\106\u0117\001\001\000\002\001\001\000\004\100\u010e\001" +
    "\001\000\004\104\u010c\001\001\000\004\102\u010a\001\001" +
    "\000\004\105\u0107\001\001\000\002\001\001\000\004\103" +
    "\u0105\001\001\000\016\005\377\014\374\017\u0101\024\u0104" +
    "\027\u0100\034\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\377\014\374\017\u0101\024\u0104\027\u0100" +
    "\034\u0109\001\001\000\002\001\001\000\016\005\377\014" +
    "\374\017\u0101\024\u0104\027\u0100\034\u010b\001\001\000\002" +
    "\001\001\000\016\005\377\014\374\017\u0101\024\u0104\027" +
    "\u0100\034\u010d\001\001\000\002\001\001\000\016\005\377" +
    "\014\374\017\u0101\024\u0104\027\u0100\034\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0112\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\377\014" +
    "\374\017\u0101\024\u0104\027\u0100\034\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\377\014\374\017\u0101\024\u0104\027\u0100\034\u0119\001\001" +
    "\000\002\001\001\000\016\005\377\014\374\017\u0101\024" +
    "\u0104\027\u0100\034\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\377\014\374\017\u0101\024\u0104\027" +
    "\u0100\034\u011e\001\001\000\002\001\001\000\006\007\u0127" +
    "\033\u0126\001\001\000\006\007\u0125\033\u0124\001\001\000" +
    "\006\007\u0123\033\u0122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\114" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u013f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\314" +
    "\030\u0143\033\310\001\001\000\002\001\001\000\004\044" +
    "\u0145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\115\u014f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\u015b\004\033\005\026\006\067\014\055\017" +
    "\061\024\051\027\056\035\060\036\022\037\030\042\032" +
    "\043\031\001\001\000\002\001\001\000\034\003\u015d\004" +
    "\033\005\026\006\067\014\055\017\061\024\051\027\056" +
    "\035\060\036\022\037\030\042\032\043\031\001\001\000" +
    "\002\001\001\000\034\003\u015f\004\033\005\026\006\067" +
    "\014\055\017\061\024\051\027\056\035\060\036\022\037" +
    "\030\042\032\043\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0166\001\001" +
    "\000\002\001\001\000\004\021\u0169\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u016d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\123\u017c\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\u017f\004\033\005\026\006\067\014\055\017" +
    "\061\024\051\027\056\035\060\036\022\037\030\042\032" +
    "\043\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\u0182\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\314\030\u0189\033\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u0188\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u018b\001\001\000" +
    "\002\001\001\000\004\032\u018d\001\001\000\002\001\001" +
    "\000\034\003\u018f\004\033\005\026\006\067\014\055\017" +
    "\061\024\051\027\056\035\060\036\022\037\030\042\032" +
    "\043\031\001\001\000\002\001\001\000\004\002\u0191\001" +
    "\001\000\002\001\001\000\004\002\u0193\001\001\000\002" +
    "\001\001\000\004\002\u0195\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    int idenx; // num de fila
    ArrayList<String> listavalor1 = new ArrayList<String>();  // guarda tipos
    ArrayList<String> listapila = new ArrayList<String>();  
    ArrayList<String> listacond = new ArrayList<String>();   
    ArrayList<String> mostrarCod = new ArrayList<String>();  // guardar codigo intermedio para mostrar
    ArrayList<String> listapara = new ArrayList<String>();  // guarda FUNC_PARAMS
    ArrayList<String> listObject = new ArrayList<String>();  // guarda codigo object
    ArrayList<String> listaexp = new ArrayList<String>();  
    ArrayList<Integer> listaTemp = new ArrayList<Integer>(); //para t temporales
    ArrayList<String> listaTemp2 = new ArrayList<String>(); //para t temporales
    String codAr=""; 
    String codArFuncion="";
    String codArTodo="";
    Stack<String> pila = new Stack(); // pilasemantica
    Stack<String> pilac = new Stack(); // pilade codigo intermedio
    int temporal =0;
    int label =0;
    String CondMove ="";
    String resTemp =""; // resultado temporal
    String resTempArd ="";// resultado temporal de expresioens pa arduino
    String resExpAr =""; //imprimir expar
    String resultado ="";
    String ciclo ="";
 //  Hashtable<String, Lexema> tabla = new Hashtable<>();
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    
    public boolean valorTipo(ArrayList<String> list,String op){
        String x= list.get(list.size()-1);//ultimo elemento agregar en asignacion sera la id
        String v;
        
        switch(Operador(op)){
        case "arit":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Bool")) ) { 
                   
                return false;    
                }
            }
            return vTipo(list);
       
        case "logico":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Int")|| list.get(i).equals("Float") ) ) {
                    
                return false;    
                }
            }
            return vTipo(list);

        case "comp":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Bool")) ) {
                   
                return false;    
                }
            }
            return vTipo(list);
        case "igual":
         
            return vTipo(list);
        case "":
            
                
            return vTipo(list);
        default:
            return vTipo(list);
        }  
    }

    public boolean vTipo(ArrayList<String> list){
        String x = list.get(list.size()-1);//ultimo elemento agregar en asignacion sera la id
        String v;
         
        for (int i = 0; i < list.size(); i++) {     
            v = list.get(i);
            if(v.equals(x)){
            }else{
 
                return false;
                 }
            }
                listavalor1.clear();
                listavalor1.add(x);
            return true;
    }
    
    
    public String Operador(String token) {
        if( (token.equals("+") || token.equals("-") || token.equals("*")|| token.equals("/")) ){
            return "arit";    
        }if( (token.equals(">=") || token.equals("<=")|| token.equals("!=") || token.equals("<")|| token.equals(">") ) ){
            return "comp";     
        }if( (token.equals("||") || token.equals("&&")) ){
            return "logico";     
        }if(token.equals("==") ){
            return "igual"; // 
        }else{ return ""; } 
    }

    public String operar(String Izq, String op, String Der) {
        
        String a = Izq;
        String b = Der;

        switch (op) {
            case "+":
                return a+"+"+b;
            case "-":
                return a+"-"+b;
            case "*":
                return a+"*"+b;
            case "/":
                return a+"/"+b;
            default:
                return "false";
        }
    }
/* -------------------------------- codigo intermedio ------------------------------------ */
   public void pos() { // exp en sufijo a CodIntermedio
        String Der, Izq,x;
      
                   if( (listaTemp.isEmpty()) ){
                    listaTemp2.add("t1");
                    listaTemp.add(1);
                    Main.codArInclude2+="int t1; \n";
                    System.out.println("asd:"+listaTemp.get(0)+"");          
                    } 
                

        if(listapila.size()==2){
                  
            //x=x.replace("@", "");

            resTemp +=   "= "+listapila.get(0).replace("@", "")+" "+listapila.get(1).replace("@", "")+"\n\n";
            //System.out.println(resTemp); // imprimir codigo intermedio
            //Main.mostrarCod.add(resTemp);

        }else{

        for (String token : listapila) {
        if(!(token.charAt(0)== '@')){
            if (cOperador(token)) {
                Der = pila.pop();
                if (pila.isEmpty()) {
                    System.err.println("Error, elemento faltante");
                }
                Izq = pila.pop();
                temporal++;
                    
                 
                   if( (listaTemp.get(listaTemp.size()-1) < (temporal)) ){
                    System.out.println("T:t"+temporal);
                   listaTemp.add(temporal);
                   listaTemp2.add("t"+temporal);
                   Main.codArInclude2+="int t"+temporal+"; \n";
                    } 
                
                
                resTemp +=  coperar(Izq, token, Der)+"t"+temporal+"\n";
                resTempArd += "t"+temporal+" = "+coperarArd(Izq, token, Der)+"\n";
                pila.push("t"+temporal);
            } else {
               pila.push(token);
            }  
        }else{   
            x =token;
            x=x.replace("@", "");
            resTemp +=  "= "+"t"+temporal+" "+x+"\n\n";
            resTempArd += x+" = t"+temporal+"; \n\n";
            }
        }

        //System.out.println(resTemp); // imprimir codigo intermedio
        //Main.mostrarCod.add(resTemp);
       // Main.insertCodInt(resTemp);

        temporal = 0;
        
        }
    }
/*---------------------------------------------------------------*/
 public void cond() {                      //acomodar operaciones relacionales   solo en cilcos
        String Der, Izq,x,res="";
              for (String token : listacond) {

                if (cOperador(token)) {
                Der = pila.pop();
                if (pila.isEmpty()) {
                    System.err.println("Error, elemento faltante");
                }
                Izq = pila.pop();
                resultado += coperar(Izq, token, Der);
                System.out.println("rel "+resultado);
                Main.insertCodInt(resultado);
            } else {
               pila.push(token);
            }
             
         }
        listacond.clear(); 
    }


    private boolean cOperador(String token) {
        return token.equals("+") || token.equals("-") || token.equals("*")
                || token.equals("/") || token.equals(">")|| token.equals("==")|| token.equals("<")
                || token.equals("<=")|| token.equals(">=")|| token.equals("!=");
    }

   public String coperar(String Izq, String op, String Der) {
        String a = Izq;
        String b = Der;

        switch (op) {
            case "+":
                return "suma "+a+" "+b+" ";
            case "-":
                return "resta "+a+" "+b+" ";
            case "*":
                return "mul "+a+" "+b+" ";
            case "/":
                return "div "+a+" "+b+" ";
            case ">":
                return a+" <= "+b+" ";
            case ">=":
                return a+" < "+b+" ";    
            case "==":
                return a+" != "+b+" ";  
            case "<":
                return a+" >= "+b+" "; 
            case "<=":
                return a+" > "+b+" ";
            case "!=":
                return a+" == "+b+" ";
            default:
                return "false";
        }
    }

    public String coperarArd(String Izq, String op, String Der) {
        String a = Izq;
        String b = Der;

        switch (op) {
            case "+":
                return a+" + "+b+";";
            case "-":
                return a+" - "+b+"; ";
            case "*":
                return a+" * "+b+"; ";
            case "/":
                return a+" / "+b+"; ";
            case ">":
                return a+" <= "+b+"; ";
            case ">=":
                return a+" < "+b+"; ";    
            case "==":
                return a+" != "+b+"; ";  
            case "<":
                return a+" >= "+b+"; "; 
            case "<=":
                return a+" > "+b+"; ";
            case "!=":
                return a+" == "+b+"; ";
            default:
                return "false";
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // OBJ_PARAMETROS ::= PortA Parentesis_izq Numero_Entero NT$62 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NT$62 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$62",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OBJETO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> OBJETO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // OBJETO ::= SmartCamera NT$61 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$61 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$61",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OBJETO ::= Temp NT$60 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$60 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$60",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // DEC_OBJETO ::= error NT$59 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$59 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$59",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // DEC_OBJETO ::= New NT$58 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$58 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New OBJETO ; ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$58",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // EXP_2 ::= False 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // EXP_2 ::= True 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // EXP_2 ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // EXP_2 ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // EXP_2 ::= Numero_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXP_2 ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXP ::= Parentesis_izq error Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP ( error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXP ::= Parentesis_izq error EXP Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( error EXP ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXP ::= Parentesis_izq EXP error Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXP ::= EXP Division error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXP ::= EXP Multiplicacion error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // EXP ::= EXP Resta error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // EXP ::= EXP Suma error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXP ::= False 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
                parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
Main.ArbolConPilas.add(s);
             //    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXP ::= True 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
                parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
Main.ArbolConPilas.add(s);
             //    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXP ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listacond.add(s+"");
                parser.listapila.add(s+"");
                parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
Main.ArbolConPilas.add(s);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXP ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listavalor1.add("Text"); 
Main.ArbolConPilas.add(s);
                 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXP ::= Numero_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listacond.add(s+"");
                parser.listapila.add(s+"");
                parser.listavalor1.add("Float");
Main.ArbolConPilas.add(s);
 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXP ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listacond.add(s+"");
                parser.listapila.add(s+"");
                parser.listavalor1.add("Int");    //agregar Tipo a la arraylist
                Main.ArbolConPilas.add(s);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // EXP ::= Parentesis_izq EXP Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP ) ]\n"); 
                
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXP ::= EXP Division NT$57 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / EXP ]\n"); 
                parser.listapila.add(a+"");
                if(parser.valorTipo(parser.listavalor1,a+"") ){

                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$57 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("/");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$57",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXP ::= EXP Multiplicacion NT$56 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * EXP ]\n");
                parser.listapila.add(a+"");
                if(parser.valorTipo(parser.listavalor1,a+"") ){

                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$56 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("*");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$56",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXP ::= EXP Resta NT$55 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - EXP ]\n");
                parser.listapila.add(a+"");
                if(parser.valorTipo(parser.listavalor1,a+"") ){
                    
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;      
                    parser.listavalor1.clear();
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$55 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("-");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$55",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXP ::= EXP Suma NT$54 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + EXP ]\n"); 
                parser.listapila.add(a+"");
                if(parser.valorTipo(parser.listavalor1,a+"") ){
                    
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$54 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("+");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$54",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXP_LIST ::= EXP NT$53 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LIST",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$53 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP_LIST ::= [ EXP PComa ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$53",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // DECL_TIPO ::= error NT$52 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$52 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$52",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // DECL_TIPO ::= DEC_OBJETO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ DEC_OBJETO ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // DECL_TIPO ::= EXP_LIST 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ EXP_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // DECL ::= Identificador Asignacion EXP PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = EXP PComa ]\n");
        parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
            if(Main.buscarid(s+"")  ){
                if(parser.valorTipo(parser.listavalor1,"") ){ //tipos compatibles??
                    parser.listapila.add("@"+s);
                    
                    parser.pos(); //generar codInt de expre
                    

                    parser.listavalor1.clear();
                    parser.listapila.clear();
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles  "); 
                    Main.error = true;   
                    parser.listavalor1.clear();
                }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
                 parser.listavalor1.clear();
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DECL ::= Identificador Asignacion VALOR PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");   
        parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
            if(Main.buscarid(s+"")  ){ //id declarada??
                if(parser.valorTipo(parser.listavalor1,"") ){ //tipos compatibles??
                
                    parser.listavalor1.clear();
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros "); 
                    Main.error = true;   
                    parser.listavalor1.clear();
                }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
                 parser.listavalor1.clear();
               
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ENA_PORT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ENA_PORT ::= Enable Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ Enable() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ACT_PORT ::= PortD error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // THIS_FUNC_TYPE ::= GetTemp Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ GetTemp() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // THIS_FUNC ::= This Punto THIS_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC ::= [ This Punto FUNC_TYPE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FUNC_PARAMS ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e011 - Sintaxis erronea en la función Program -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC Coma Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", THIS_FUNC, "+b+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+", THIS_FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FUNC_PARAMS ::= Cadena Coma Numero_Entero Coma Numero_Entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", "+b+", "+c+" ]\n"); 
        parser.listapara.add(a+"");
        parser.listapara.add(b+"");
        parser.listapara.add(c+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FUNC_PARAMS ::= Numero_Entero Coma Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+","+b+" ]\n"); 

        parser.listapara.add(s+"");
        parser.listapara.add(b+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FUNC_TYPE ::= error NT$51 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$51 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$51",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FUNC_TYPE ::= StopRec Parentesis_izq Parentesis_der NT$50 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$50 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ StopRec(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$50",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FUNC_TYPE ::= Record Parentesis_izq Parentesis_der NT$49 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$49 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Record(); ]\n"); 
    /* codigo intermedio */
    parser.resultado+="Record() \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$49",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FUNC_TYPE ::= Off Parentesis_izq Parentesis_der NT$48 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$48 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    /* codigo intermedio */
    parser.resultado+="Camera.Off \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado=""; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$48",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FUNC_TYPE ::= On Parentesis_izq Parentesis_der NT$47 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$47 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ On(); ]\n"); 
    /* codigo intermedio */
    parser.resultado+="Camera.On \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado=""; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$47",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FUNC_TYPE ::= IsMove Parentesis_izq Parentesis_der NT$46 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$46 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsMove(); ]\n"); 
    /* codigo intermedio */
    parser.resultado+="IsMove() \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$46",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FUNC_TYPE ::= IsOn Parentesis_izq Parentesis_der NT$45 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$45 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOn(); ]\n"); 
    /* codigo intermedio */
    parser.resultado+="IsOn() \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$45",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FUNC ::= Punto error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Punto FUNC_TYPE ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FUNC ::= Alarm Parentesis_izq Numero_Entero Parentesis_der NT$44 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$44 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move(FUNC_PARAMS); ]\n"); 
    /* codigo intermedio */
    parser.resTemp+="Alarm("+s+") \n";
    
    //cod ARduino
     parser.codArFuncion+="//buzzer \n"+
    "  for(int pos=0; pos<"+s+";pos+=1){\n" +
    "  tone(pBuzzer, NOTA_C4, cuarto); //un cuarto de la nota C4.\n" +
    "  delay(cuarto*pausa); // silenciar por una duración de la nota previa + 30% de la duración de esa nota\n" +
    "  tone(pBuzzer, NOTA_A4, octavo); //un cuarto de la nota A4.\n" +
    "  delay(octavo*pausa); // silenciar por una duración de la nota previa + 30% de la duración de esa nota\n" +
    "  tone(pBuzzer, NOTA_E5, cuarto); //un cuarto de la nota E5.\n" +
    "  delay(cuarto*pausa); // silenciar por una duración de la nota previa + 30% de la duración de esa nota"+
    "    } \n";

    parser.listapara.clear();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$44",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FUNC ::= Move Parentesis_izq FUNC_PARAMS Parentesis_der NT$43 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$43 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move(FUNC_PARAMS); ]\n"); 
    /* codigo intermedio */
    parser.resTemp+="Move("+parser.listapara.get(0)+","+parser.listapara.get(1)+") \n";
    
    //cod ARduino
    // grado y velocida max 50 
        parser.codArFuncion+="//servor \n"+
    "servo1.attach(5);\n" +
    " servo1.write(179);"+
    "  for(int pos=0; pos<"+parser.listapara.get(0)+";pos+=1){\n" +
    "  servo1.write(pos);\n" +
    "  delay(50-"+parser.listapara.get(1)+");\n" +
    "    } \n";

    parser.listapara.clear();
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$43",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FUNC ::= Retroceder Parentesis_izq Numero_Entero Parentesis_der NT$42 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$42 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Retroceder(FUNC_PARAMS); ]\n"); 
    /* codigo intermedio */
    parser.resTemp+="Retroceder("+s+") \n";
   
    //cod ARduino
    //distancia y velocidad
    parser.codArFuncion+="//motordc retro \n"+
        "for(int pos=0; pos<"+s+";pos+=1){\n" +
        " digitalWrite(ENA, HIGH);\n" +
        " digitalWrite(IN1, LOW);\n" +
        " digitalWrite(IN2, HIGH);  \n" +
        " delay(1000);}\n" +
        "  digitalWrite(IN1, 0);\n" +
        " digitalWrite(IN2, 0);\n" +
        " digitalWrite(ENA, LOW);";
        System.out.println("Retrocedoer::"); 
    parser.listapara.clear();


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$42",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FUNC ::= Avanzar Parentesis_izq Numero_Entero Parentesis_der NT$41 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$41 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Avanzar(FUNC_PARAMS); ]\n");
    /* codigo intermedio */
   
    parser.resTemp+="Avanzar("+s+") \n";
    //cod ARduino
    //distancia o tiempo
    parser.codArFuncion+="//motordc avanz\n"+
        "for(int pos=0; pos<"+s+";pos+=1){\n" +
        " digitalWrite(ENA, HIGH);\n" +
        " digitalWrite(IN1, HIGH);\n" +
        " digitalWrite(IN2, LOW);  \n" +
        " delay(1000);}\n" +
        "  digitalWrite(IN1, 0);\n" +
        " digitalWrite(IN2, 0);\n" +
        " digitalWrite(ENA, LOW);";
    System.out.println("avanzar::"); 
    parser.listapara.clear();


    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$41",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FUNC ::= Detener Parentesis_izq Parentesis_der NT$40 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$40 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Detener(); ]\n"); 
    /* codigo intermedio */
    parser.resTemp+="Detener() \n";
    System.out.println("Detener::"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$40",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FUNC ::= IsSound Parentesis_izq Parentesis_der NT$39 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$39 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsSound(); ]\n"); 
    /* codigo intermedio */
    parser.resTemp+="IsSound() \n";
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$39",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FUNC ::= Whistle Parentesis_izq Parentesis_der NT$38 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$38 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Whistle(); ]\n"); 
    /* codigo intermedio */

    parser.resTemp+="Whistle() \n";

    //cod ard 
         parser.codArFuncion+="//buzzer \n"+
    "  tone(pBuzzer, NOTA_C4, cuarto); //un cuarto de la nota C4.\n" +
    "  delay(cuarto*pausa); // silenciar por una duración de la nota previa + 30% de la duración de esa nota\n" +
    "  tone(pBuzzer, NOTA_A4, octavo); //un cuarto de la nota A4.\n" +
    "  delay(octavo*pausa); // silenciar por una duración de la nota previa + 30% de la duración de esa nota\n" +
    "  tone(pBuzzer, NOTA_E5, cuarto); //un cuarto de la nota E5.\n" +
    "  delay(cuarto*pausa); // silenciar por una duración de la nota previa + 30% de la duración de esa nota"+
    "    \n";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$38",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FUNC ::= Capture Parentesis_izq Parentesis_der NT$37 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$37 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Capture(); ]\n"); 
    /* codigo intermedio */
    parser.resultado+="Capture() \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$37",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FUNC ::= Camera Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FUNC ::= Micro Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FUNC ::= Display VALUE_OUT NT$36 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$36 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Display VALUE PComa ]\n"); 
    /* codigo intermedio */
    parser.resultado+="Display("+parser.listapara.get(0)+") \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";

  parser.codArFuncion+="//LSD \n" +
  " oled.clearDisplay(); \n" +     // limpia pantalla
  " oled.setTextColor(WHITE);\n" +   // establece color al unico disponible (pantalla monocromo)
  " oled.setCursor(0, 0);\n" +     // ubica cursor en inicio de coordenadas 0,0
  " oled.setTextSize(2); \n" +     // establece tamano de texto en 1
  " oled.print(\""+parser.listapara.get(0)+"\");\n" +  // escribe en pantalla el texto
  " oled.display();\n" ;
    parser.listapara.clear();


    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$36",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FUNC ::= RecordTime Parentesis_izq Numero_Entero Parentesis_der NT$35 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$35 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ RecordTime("+s+"); ]\n"); 
    /* codigo intermedio */
    parser.resultado+="RecordTime("+s+") \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";
    
   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$35",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VALUE_IN ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis erronea en el método Receive -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VALUE_IN ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VALUE_IN ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VALUE_IN ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VALUE_OUT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis erronea en el método Display -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VALUE_OUT ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
        parser.listapara.add(s+"");

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VALUE_OUT ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
        parser.listapara.add(s+"");

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VALUE_OUT ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
        parser.listapara.add(s+"");
       


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IN_OUT ::= Receive error NT$34 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$34 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis en el método Receive erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$34",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IN_OUT ::= Receive Parentesis_izq VALUE_IN Parentesis_der NT$33 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$33 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$33",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUNC_TYPE_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE_IF ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUNC_TYPE_IF ::= IsMove Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsMove() ]\n"); 
        parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
        parser.codAr+="digitalRead(sensor)==HIGH";
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUNC_TYPE_IF ::= IsOn Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsOn() ]\n"); 
        parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // While_STMT ::= While Parentesis_izq COND Parentesis_der COND_FOR_2 
            {
              Object RESULT =null;
		
     //   Main.arbolSin.add("( "+(sright+1)+" ) ---> While_STMT ::= [ While ( COND ) COND_FOR_2 ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("While_STMT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COND_FOR_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR_2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // COND_FOR_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ { STMT_IF }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR_2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // COND_FOR ::= Parentesis_izq Int Identificador Asignacion Numero_Entero PComa COND NT$32 PComa Identificador Inc Parentesis_der COND_FOR_2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$32 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

    Main.listaIdValor.add(s+"");
    Main.listaIdTipo.add(b+"");
    Main.listaIdLinea.add((sright+1));
    Main.listaValoresId.add(a+""); 

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$32",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FOR_STMT ::= For COND_FOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FOR_STMT ::= [ For ]\n");

        String x="";
          for (int i = 0; i < parser.listacond.size(); i++) {
                  x+= i+":"+parser.listacond.get(i);
            }

        parser.label++;
        parser.resultado+="= 0 i \n";
        parser.resultado+="L"+parser.label+": if ";
        parser.cond();
        parser.label++;
        parser.resultado+="GOTO L"+parser.label+"\n";
        parser.resultado+="suma i 1 i \n";
        parser.resultado+=parser.resTemp;   //lo que ejecuta si es true
        parser.resTemp="";
        
        parser.resExpAr+=parser.resTempArd;   //lo que ejecuta si es true
        parser.resTempArd="";
        
        parser.label--;
        parser.resultado+="GOTO L"+parser.label+"\n";
        parser.label++;
        parser.resultado+="L"+parser.label+":\n\n";    
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_STMT",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF_FUNC_TYPE ::= IsMove Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsMove() ]\n"); 
        //parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
        parser.CondMove="IsMove()";
       parser.codAr+="value == HIGH";

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IF_FUNC_TYPE ::= IsSound Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ IsSound() ]\n"); 
         //parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
    /* codigo intermedio */
    parser.resultado+="IsSound() \n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";

    parser.codAr+="analogRead(Mic)==HIGH";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IF_FUNC_TYPE ::= Camera Punto FUNC_TYPE_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IF_FUNC_TYPE ::= Micro Punto FUNC_TYPE_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // STMT_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ]\n");
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // STMT_IF ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ }); ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // STMT_IF ::= Llave_der Else COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // STMT_IF ::= Llave_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // STMT_IF ::= ERROR3 NT$31 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$31 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR3 ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$31",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // STMT_IF ::= ERROR NT$30 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$30 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$30",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STMT_IF ::= error NT$29 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$29 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$29",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STMT_IF ::= IF_STMT NT$28 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$28 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$28",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // STMT_IF ::= IN_OUT NT$27 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$27 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$27",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // STMT_IF ::= FUNC NT$26 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$26 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ FUNC STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$26",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // STMT_IF ::= ACT_PORT NT$25 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$25 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ACT_PORT STMT_IF]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$25",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // STMT_IF ::= DECL NT$24 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$24 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ DECL STMT_IF ]\n"); 
        

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$24",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COND ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e015 - Condición inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COND ::= IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ IF_FUNC_TYPE ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COND ::= IF_FUNC_TYPE Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COND ::= IF_FUNC_TYPE And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COND ::= IF_FUNC_TYPE Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }          
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= EXP Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= EXP And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= EXP Diferente IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COND ::= EXP Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COND ::= IF_FUNC_TYPE Or EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COND ::= IF_FUNC_TYPE And EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COND ::= IF_FUNC_TYPE Igual EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");    
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COND ::= EXP Or NT$23 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$23 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("|");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COND ::= EXP And NT$22 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
           // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
           // Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$22 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("&");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COND ::= EXP Menor_igual EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
           // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
           // Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COND ::= EXP Menor NT$21 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            //Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            //Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$21 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("<");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COND ::= EXP Mayor_igual EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            //Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            //Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COND ::= EXP Mayor NT$20 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            //Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
           //Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$20 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add(">");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND ::= EXP Diferente NT$19 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        } 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("!");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= EXP Igual NT$18 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
       
        parser.listacond.add(a+"");
       
         //parser.cond();

        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();    
        }else{
            //Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            //Main.error = true;      
            parser.listavalor1.clear();
        }            
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$18 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
Main.ArbolConPilas.add("=");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND_IF_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND_IF_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ { IF_FUNC_TYPE }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND_IF ::= Parentesis_izq error COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND_IF ::= error Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND_IF ::= Parentesis_izq COND Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ ( COND ) COND_IF_2 ]\n");
            Main.ArbolConPilas.add("\t");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_STMT ::= If COND_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> IF_STMT ::= [ If COND_IF ; ]\n");
        parser.ciclo = "if";
        //codarduino
        parser.codArTodo+="if ( "+parser.codAr+" ){ \n";
   
        parser.codAr="";
        parser.resExpAr+=parser.resTempArd;
        parser.resTempArd="";   
        parser.codArFuncion+=parser.resExpAr;
        parser.resExpAr="";
        parser.codArTodo+=parser.codArFuncion+"} \n"; // funciones de arduino dentro de if
        parser.codArFuncion="";
        Main.codarduinoL+=parser.codArTodo;
        parser.codArTodo="";

        //intermedio
        System.out.println("IF_SMT::"); 
        parser.resultado+="if ";
        parser.resultado+=parser.CondMove;
        parser.CondMove="";
        parser.cond();
        parser.label++;
        parser.resultado+="GOTO L"+parser.label+"\n";
        parser.resultado+=parser.resTemp;   //lo que ejecuta si es true
        parser.resTemp="";
      
        parser.resExpAr+=parser.resTempArd;   //lo que ejecuta si es true
        parser.resTempArd="";

        parser.resultado+="L"+parser.label+":\n\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_STMT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STMT ::= ERROR3 NT$17 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$17 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STMT ::= ERROR NT$16 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STMT ::= error NT$15 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$15 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STMT ::= IN_OUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ IN_OUT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STMT ::= FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ FUNC ]\n"); 

        System.out.println("fncc::"); 
        //ardui
        parser.resExpAr+=parser.resTempArd;   // expresiones
        parser.resTempArd="";   
        parser.codArFuncion+=parser.resExpAr;
        parser.resExpAr="";
        parser.codArTodo+=parser.codArFuncion+" \n"; // funciones de arduino dentro de if
        parser.codArFuncion="";
        Main.codarduinoS+=parser.codArTodo;
        parser.codArTodo="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STMT ::= ACT_PORT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ ACT_PORT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STMT ::= DECL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ DECL ]\n");
        parser.resultado+=parser.resTemp;   // expresiones
        parser.resTemp="";   
        
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";


        System.out.println("STMT::"); 
        //ardui
        parser.resExpAr+=parser.resTempArd;   // expresiones
        parser.resTempArd="";   
        parser.codArFuncion+=parser.resExpAr;
        parser.resExpAr="";
        parser.codArTodo+=parser.codArFuncion+" \n"; // funciones de arduino dentro de if
        parser.codArFuncion="";
        Main.codarduinoS+=parser.codArTodo;
        parser.codArTodo="";
     


    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CIERRE ::= IF_STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ IF_STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CIERRE ::= STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CIERRE ::= ERROR2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CIERRE ::= ERROR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CIERRE ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CIERRE ::= Llave_der Parentesis_der PComa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CIERRE ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO ::= Bool 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Bool ]\n");
     //   Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= Float 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Float ]\n");
   //     Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= Text 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Text ]\n");
     //   Main.listaIdValor.add(s+"");
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= Int 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Int ]\n");
     //   Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLS ::= Bool Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un True o False "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLS ::= Bool Identificador Asignacion False PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");

          Main.codArInclude2+="boolean "+s+" = false; \n";

        parser.resultado+=b+" "+s+" = "+a+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLS ::= Bool Identificador Asignacion True PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");

        parser.resultado+=b+" "+s+" = "+a+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";

        Main.codArInclude2+="boolean "+s+" = true; \n"; 

        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLS ::= Float Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Número real "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLS ::= Float Identificador Asignacion Numero_Flotante PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
         Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");

        parser.resultado+=b+" "+s+" = "+a+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";

        Main.codArInclude2+="float "+s+" = "+a+"; \n"; 

        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
       
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLS ::= Text Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Cadena "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLS ::= Text Identificador Asignacion Cadena PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");

        parser.resultado+=b+" "+s+" = "+a+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";

        Main.codArInclude2+="String "+s+" = "+a+"; \n"; 

        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLS ::= Int Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Número entero "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLS ::= Int Identificador Asignacion Numero_Entero NT$14 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$14 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Int "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");

        parser.resultado+=b+" "+s+" = "+a+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";

        Main.codArInclude2+="int "+s+" = "+a+"; \n"; 

        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLVA ::= Bool Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Bool "+s+" ]\n");
         if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(" ");
          
        parser.resultado+="Bool "+s+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";
        
        Main.codArInclude2+="boolean "+s+"; \n"; 

        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLVA ::= Float Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Float "+s+" ]\n");
         if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(" ");
          
        parser.resultado+="Float "+s+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";

        Main.codArInclude2+="float "+s+"; \n"; 

        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        } 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLVA ::= Text Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Text "+s+" ]\n");
         if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(" ");
          
        parser.resultado+="Text "+s+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";

        Main.codArInclude2+="String "+s+"; \n"; 
        
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLVA ::= Int Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Int "+s+" ]\n");
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(" ");
          
        parser.resultado+="Int "+s+"\n";
        Main.mostrarCod.add(parser.resultado);
        parser.resultado="";
        
        Main.codArInclude2+="int "+s+"; \n"; 

        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }  
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLVA ::= DECLS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLVA ::= [ DECLS ]\n"); 
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPOR ::= Import Identificador Punto Identificador NT$13 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$13 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" Punto "+a+" PComa ]\n"); 
        /* codigo intermedio */
    parser.resultado+="Import "+s+"."+a+"\n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPOR ::= Import Identificador NT$12 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$12 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" ]\n"); 
    /* codigo intermedio */
    parser.resultado+="Import "+s+"\n";
    Main.mostrarCod.add(parser.resultado);
    parser.resultado="";
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMT_LIST ::= CIERRE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ CIERRE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STMT_LIST ::= While_STMT NT$11 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [  While_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMT_LIST ::= FOR_STMT NT$10 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ FOR_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STMT_LIST ::= IF_STMT NT$9 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IF_STMT STMT_LIST ]\n"); 
       
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STMT_LIST ::= STMT NT$8 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMT_LIST ::= error NT$7 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STMT_LIST ::= DECLVA NT$6 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
// declaraciones
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ DECLVA STMT_LIST ]\n");    

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STMT_LIST ::= IMPOR NT$5 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IMPOR STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - No se encontró el Metodo Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= ERROR2 NT$4 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= ERROR NT$3 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error NT$2 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador error NT$1 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ "+s+" error { STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e004 - Sintaxis del Metodo Initialize Erronea -> ");  
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Identificador NT$0 Punto Initialize Parentesis_izq Camera Llave_izq STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO "+s+".Initialize(Camera{ STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

